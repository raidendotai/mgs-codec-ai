{"version":3,"sources":["../../../node_modules/.pnpm/tsup@8.2.4_@microsoft+api-extractor@7.47.4_@types+node@22.4.1__postcss@8.4.41_tsx@4.17.0_typescript@5.5.4/node_modules/tsup/assets/cjs_shims.js","../src/fs/types.ts","../../../node_modules/.pnpm/tinytar@0.1.0/node_modules/tinytar/lib/utils.js","../../../node_modules/.pnpm/tinytar@0.1.0/node_modules/tinytar/lib/constants.js","../../../node_modules/.pnpm/tinytar@0.1.0/node_modules/tinytar/lib/types.js","../../../node_modules/.pnpm/tinytar@0.1.0/node_modules/tinytar/lib/tar.js","../../../node_modules/.pnpm/tinytar@0.1.0/node_modules/tinytar/lib/untar.js","../../../node_modules/.pnpm/tinytar@0.1.0/node_modules/tinytar/index.js","../src/fs/tarUtils.ts","../src/fs/idbfs.ts","../src/fs/memoryfs.ts","../src/fs/nodefs.ts","../src/fs/opfs-ahp/types.ts","../src/fs/opfs-ahp/emscriptenFs.ts","../src/fs/opfs-ahp/opfsAhp.ts","../src/fs/opfs-ahp/index.ts","../src/fs/index.ts","../src/index.ts","../src/pglite.ts","../../../node_modules/.pnpm/async-mutex@0.4.1/node_modules/async-mutex/index.mjs","../src/postgresMod.ts","../src/utils.ts","../../pg-protocol/src/index.ts","../../pg-protocol/src/serializer.ts","../../pg-protocol/src/buffer-writer.ts","../../pg-protocol/src/string-utils.ts","../../pg-protocol/src/parser.ts","../../pg-protocol/src/messages.ts","../../pg-protocol/src/types.ts","../../pg-protocol/src/buffer-reader.ts","../src/parse.ts","../src/types.ts","../src/base.ts","../src/templating.ts","../src/extensionUtils.ts","../src/interface.ts"],"sourcesContent":["// Shim globals in cjs bundle\n// There's a weird bug that esbuild will always inject importMetaUrl\n// if we export it as `const importMetaUrl = ... __filename ...`\n// But using a function will not cause this issue\n\nconst getImportMetaUrl = () =>\n  typeof document === 'undefined'\n    ? new URL(`file:${__filename}`).href\n    : (document.currentScript && document.currentScript.src) ||\n      new URL('main.js', document.baseURI).href\n\nexport const importMetaUrl = /* @__PURE__ */ getImportMetaUrl()\n","import type { PostgresMod, FS } from '../postgresMod.js'\nimport type { DumpTarCompressionOptions } from './tarUtils.js'\n\nexport type FsType =\n  | 'nodefs'\n  | 'idbfs'\n  | 'memoryfs'\n  | 'opfs-worker'\n  | 'opfs-ahp'\n\nexport interface FilesystemFactory {\n  new (dataDir: string): Filesystem\n}\n\nexport interface Filesystem {\n  /**\n   * Returns the options to pass to the emscripten module.\n   */\n  emscriptenOpts(opts: Partial<PostgresMod>): Promise<Partial<PostgresMod>>\n\n  /**\n   * Sync the filesystem to the emscripten filesystem.\n   */\n  syncToFs(mod: FS, relaxedDurability?: boolean): Promise<void>\n\n  /**\n   * Sync the emscripten filesystem to the filesystem.\n   */\n  initialSyncFs(FS: FS): Promise<void>\n\n  /**\n   * Dump the PGDATA dir from the filesystem to a gziped tarball.\n   */\n  dumpTar(\n    FS: FS,\n    dbname: string,\n    compression?: DumpTarCompressionOptions,\n  ): Promise<File | Blob>\n\n  /**\n   * Close the filesystem.\n   */\n  close(FS: FS): Promise<void>\n}\n\nexport abstract class FilesystemBase implements Filesystem {\n  protected dataDir?: string\n  constructor(dataDir?: string) {\n    this.dataDir = dataDir\n  }\n  abstract emscriptenOpts(\n    opts: Partial<PostgresMod>,\n  ): Promise<Partial<PostgresMod>>\n  async syncToFs(_mod: FS, _relaxedDurability?: boolean) {}\n  async initialSyncFs(_mod: FS) {}\n  abstract dumpTar(mod: FS, dbname: string): Promise<File | Blob>\n  async close(_FS: FS) {}\n}\n","'use strict';\n\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\nvar undefined = (function(undefined) {\n  return undefined;\n})();\n\nfunction isUndefined(value) {\n  return value === undefined;\n}\n\nfunction isString(value) {\n  return (typeof value == 'string') ||\n    (Object.prototype.toString.call(value) == '[object String]');\n}\n\nfunction isDateTime(value) {\n  return (Object.prototype.toString.call(value) == '[object Date]');\n}\n\nfunction isObject(value) {\n  return (value !== null) && (typeof value == 'object');\n}\n\nfunction isFunction(value) {\n  return typeof value == 'function';\n}\n\nfunction isLength(value) {\n  return (typeof value == 'number') &&\n    (value > -1) && (value % 1 == 0) &&\n    (value <= MAX_SAFE_INTEGER);\n}\n\nfunction isArray(value) {\n  return Object.prototype.toString.call(value) == '[object Array]';\n}\n\nfunction isArrayLike(value) {\n  return isObject(value) && !isFunction(value) && isLength(value.length);\n}\n\nfunction isArrayBuffer(value) {\n  return Object.prototype.toString.call(value) == '[object ArrayBuffer]';\n}\n\nfunction map(array, iteratee) {\n  return Array.prototype.map.call(array, iteratee);\n}\n\nfunction find(array, iteratee) {\n  var result = undefined;\n\n  if (isFunction(iteratee)) {\n    Array.prototype.every.call(array, function(item, index, array) {\n      var found = iteratee(item, index, array);\n      if (found) {\n        result = item;\n      }\n      return !found;  // continue if not found\n    });\n  }\n\n  return result;\n}\n\nfunction extend(target /* ...sources */) {\n  return Object.assign.apply(null, arguments);\n}\n\nfunction toUint8Array(value) {\n  var i;\n  var length;\n  var result;\n\n  if (isString(value)) {\n    length = value.length;\n    result = new Uint8Array(length);\n    for (i = 0; i < length; i++) {\n      result[i] = value.charCodeAt(i) & 0xFF;\n    }\n    return result;\n  }\n\n  if (isArrayBuffer(value)) {\n    return new Uint8Array(value);\n  }\n\n  if (isObject(value) && isArrayBuffer(value.buffer)) {\n    return new Uint8Array(value.buffer);\n  }\n\n  if (isArrayLike(value)) {\n    return new Uint8Array(value);\n  }\n\n  if (isObject(value) && isFunction(value.toString)) {\n    return toUint8Array(value.toString());\n  }\n\n  return new Uint8Array();\n}\n\nmodule.exports.MAX_SAFE_INTEGER = MAX_SAFE_INTEGER;\n\nmodule.exports.isUndefined = isUndefined;\nmodule.exports.isString = isString;\nmodule.exports.isObject = isObject;\nmodule.exports.isDateTime = isDateTime;\nmodule.exports.isFunction = isFunction;\nmodule.exports.isArray = isArray;\nmodule.exports.isArrayLike = isArrayLike;\nmodule.exports.isArrayBuffer = isArrayBuffer;\nmodule.exports.map = map;\nmodule.exports.find = find;\nmodule.exports.extend = extend;\nmodule.exports.toUint8Array = toUint8Array;\n","'use strict';\n\nvar NULL_CHAR = '\\u0000';\n\nmodule.exports = {\n  /* eslint-disable key-spacing */\n\n  NULL_CHAR: NULL_CHAR,\n\n  TMAGIC: 'ustar' + NULL_CHAR + '00',   // 'ustar', NULL, '00'\n  OLDGNU_MAGIC: 'ustar  ' + NULL_CHAR,  // 'ustar  ', NULL\n\n  // Values used in typeflag field.\n  REGTYPE:  0,  // regular file\n  LNKTYPE:  1,  // link\n  SYMTYPE:  2,  // reserved\n  CHRTYPE:  3,  // character special\n  BLKTYPE:  4,  // block special\n  DIRTYPE:  5,  // directory\n  FIFOTYPE: 6,  // FIFO special\n  CONTTYPE: 7,  // reserved\n\n  // Bits used in the mode field, values in octal.\n  TSUID: parseInt('4000', 8),  // set UID on execution\n  TSGID: parseInt('2000', 8),  // set GID on execution\n  TSVTX: parseInt('1000', 8),  // reserved\n\n  // file permissions\n  TUREAD:  parseInt('0400', 8),  // read by owner\n  TUWRITE: parseInt('0200', 8),  // write by owner\n  TUEXEC:  parseInt('0100', 8),  // execute/search by owner\n  TGREAD:  parseInt('0040', 8),  // read by group\n  TGWRITE: parseInt('0020', 8),  // write by group\n  TGEXEC:  parseInt('0010', 8),  // execute/search by group\n  TOREAD:  parseInt('0004', 8),  // read by other\n  TOWRITE: parseInt('0002', 8),  // write by other\n  TOEXEC:  parseInt('0001', 8),   // execute/search by other\n\n  TPERMALL:  parseInt('0777', 8),   // rwxrwxrwx\n  TPERMMASK: parseInt('0777', 8)    // permissions bitmask\n\n  /* eslint-enable key-spacing */\n};\n","'use strict';\n\nvar utils = require('./utils');\nvar constants = require('./constants');\n\nvar recordSize = 512;\nvar defaultFileMode = constants.TPERMALL;  // rwxrwxrwx\nvar defaultUid = 0;  // root\nvar defaultGid = 0;  // root\n\n/*\n struct posix_header {           // byte offset\n char name[100];               //   0\n char mode[8];                 // 100\n char uid[8];                  // 108\n char gid[8];                  // 116\n char size[12];                // 124\n char mtime[12];               // 136\n char chksum[8];               // 148\n char typeflag;                // 156\n char linkname[100];           // 157\n char magic[6];                // 257\n char version[2];              // 263\n char uname[32];               // 265\n char gname[32];               // 297\n char devmajor[8];             // 329\n char devminor[8];             // 337\n char prefix[131];             // 345\n char atime[12];               // 476\n char ctime[12];               // 488\n };\n */\n\nvar posixHeader = [\n  // <field name>, <size>, <offset>, <used>, <format>, <parse>, [ <check> ]\n  ['name', 100, 0, function(file, field) {\n    return formatTarString(file[field[0]], field[1]);\n  }, function(buffer, offset, field) {\n    return parseTarString(buffer.slice(offset, offset + field[1]));\n  }],\n  ['mode', 8, 100, function(file, field) {\n    var mode = file[field[0]] || defaultFileMode;\n    mode = mode & constants.TPERMMASK;\n    return formatTarNumber(mode, field[1], defaultFileMode);\n  }, function(buffer, offset, field) {\n    var result = parseTarNumber(buffer.slice(offset, offset + field[1]));\n    result &= constants.TPERMMASK;\n    return result;\n  }],\n  ['uid', 8, 108, function(file, field) {\n    return formatTarNumber(file[field[0]], field[1], defaultUid);\n  }, function(buffer, offset, field) {\n    return parseTarNumber(buffer.slice(offset, offset + field[1]));\n  }],\n  ['gid', 8, 116, function(file, field) {\n    return formatTarNumber(file[field[0]], field[1], defaultGid);\n  }, function(buffer, offset, field) {\n    return parseTarNumber(buffer.slice(offset, offset + field[1]));\n  }],\n  ['size', 12, 124, function(file, field) {\n    return formatTarNumber(file.data.length, field[1]);\n  }, function(buffer, offset, field) {\n    return parseTarNumber(buffer.slice(offset, offset + field[1]));\n  }],\n  ['modifyTime', 12, 136, function(file, field) {\n    return formatTarDateTime(file[field[0]], field[1]);\n  }, function(buffer, offset, field) {\n    return parseTarDateTime(buffer.slice(offset, offset + field[1]));\n  }],\n  ['checksum', 8, 148, function(file, field) {\n    return '        ';  // placeholder\n  }, function(buffer, offset, field) {\n    return parseTarNumber(buffer.slice(offset, offset + field[1]));\n  }],\n  ['type', 1, 156, function(file, field) {\n    // get last octal digit; 0 - regular file\n    return '' + ((parseInt(file[field[0]], 10) || 0) % 8);\n  }, function(buffer, offset, field) {\n    return (parseInt(String.fromCharCode(buffer[offset]), 10) || 0) % 8;\n  }],\n  ['linkName', 100, 157, function(file, field) {\n    return '';  // only regular files are supported\n  }, function(buffer, offset, field) {\n    return parseTarString(buffer.slice(offset, offset + field[1]));\n  }],\n  ['ustar', 8, 257, function(file, field) {\n    return constants.TMAGIC;  // magic + version\n  }, function(buffer, offset, field) {\n    return fixUstarMagic(\n      parseTarString(buffer.slice(offset, offset + field[1]), true)\n    );\n  }, function(file, field) {\n    return (file[field[0]] == constants.TMAGIC) ||\n      (file[field[0]] == constants.OLDGNU_MAGIC);\n  }],\n  ['owner', 32, 265, function(file, field) {\n    return formatTarString(file[field[0]], field[1]);\n  }, function(buffer, offset, field) {\n    return parseTarString(buffer.slice(offset, offset + field[1]));\n  }],\n  ['group', 32, 297, function(file, field) {\n    return formatTarString(file[field[0]], field[1]);\n  }, function(buffer, offset, field) {\n    return parseTarString(buffer.slice(offset, offset + field[1]));\n  }],\n  ['majorNumber', 8, 329, function(file, field) {\n    return '';  // only regular files are supported\n  }, function(buffer, offset, field) {\n    return parseTarNumber(buffer.slice(offset, offset + field[1]));\n  }],\n  ['minorNumber', 8, 337, function(file, field) {\n    return '';  // only regular files are supported\n  }, function(buffer, offset, field) {\n    return parseTarNumber(buffer.slice(offset, offset + field[1]));\n  }],\n  ['prefix', 131, 345, function(file, field) {\n    return formatTarString(file[field[0]], field[1]);\n  }, function(buffer, offset, field) {\n    return parseTarString(buffer.slice(offset, offset + field[1]));\n  }],\n  ['accessTime', 12, 476, function(file, field) {\n    return formatTarDateTime(file[field[0]], field[1]);\n  }, function(buffer, offset, field) {\n    return parseTarDateTime(buffer.slice(offset, offset + field[1]));\n  }],\n  ['createTime', 12, 488, function(file, field) {\n    return formatTarDateTime(file[field[0]], field[1]);\n  }, function(buffer, offset, field) {\n    return parseTarDateTime(buffer.slice(offset, offset + field[1]));\n  }]\n];\n\nvar effectiveHeaderSize = (function(header) {\n  var last = header[header.length - 1];\n  return last[2] + last[1];  // offset + size\n})(posixHeader);\n\nfunction fixUstarMagic(value) {\n  if (value.length == 8) {\n    var chars = value.split('');\n\n    if (chars[5] == constants.NULL_CHAR) {\n      // TMAGIC ?\n      if ((chars[6] == ' ') || (chars[6] == constants.NULL_CHAR)) {\n        chars[6] = '0';\n      }\n      if ((chars[7] == ' ') || (chars[7] == constants.NULL_CHAR)) {\n        chars[7] = '0';\n      }\n      chars = chars.join('');\n      return chars == constants.TMAGIC ? chars : value;\n    } else if (chars[7] == constants.NULL_CHAR) {\n      // OLDGNU_MAGIC ?\n      if (chars[5] == constants.NULL_CHAR) {\n        chars[5] = ' ';\n      }\n      if (chars[6] == constants.NULL_CHAR) {\n        chars[6] = ' ';\n      }\n      return chars == constants.OLDGNU_MAGIC ? chars : value;\n    }\n  }\n  return value;\n}\n\nfunction formatTarString(value, length) {\n  length -= 1;  // preserve space for trailing null-char\n  if (utils.isUndefined(value)) {\n    value = '';\n  }\n  value = ('' + value).substr(0, length);\n  return value + constants.NULL_CHAR;\n}\n\nfunction formatTarNumber(value, length, defaultValue) {\n  defaultValue = parseInt(defaultValue) || 0;\n  length -= 1;  // preserve space for trailing null-char\n  value = (parseInt(value) || defaultValue)\n    .toString(8).substr(-length, length);\n  while (value.length < length) {\n    value = '0' + value;\n  }\n  return value + constants.NULL_CHAR;\n}\n\nfunction formatTarDateTime(value, length) {\n  if (utils.isDateTime(value)) {\n    value = Math.floor(1 * value / 1000);\n  } else {\n    value = parseInt(value, 10);\n    if (isFinite(value)) {\n      if (value <= 0) {\n        return '';\n      }\n    } else {\n      value = Math.floor(1 * new Date() / 1000);\n    }\n  }\n  return formatTarNumber(value, length, 0);\n}\n\nfunction parseTarString(bytes, returnUnprocessed) {\n  var result = String.fromCharCode.apply(null, bytes);\n  if (returnUnprocessed) {\n    return result;\n  }\n  var index = result.indexOf(constants.NULL_CHAR);\n  return index >= 0 ? result.substr(0, index) : result;\n}\n\nfunction parseTarNumber(bytes) {\n  var result = String.fromCharCode.apply(null, bytes);\n  return parseInt(result.replace(/^0+$/g, ''), 8) || 0;\n}\n\nfunction parseTarDateTime(bytes) {\n  if ((bytes.length == 0) || (bytes[0] == 0)) {\n    return null;\n  }\n  return new Date(1000 * parseTarNumber(bytes));\n}\n\nfunction calculateChecksum(buffer, offset, skipChecksum) {\n  var from = parseInt(offset, 10) || 0;\n  var to = Math.min(from + effectiveHeaderSize, buffer.length);\n  var result = 0;\n\n  // When calculating checksum, `checksum` field should be\n  // threat as filled with space char (byte 32)\n  var skipFrom = 0;\n  var skipTo = 0;\n  if (skipChecksum) {\n    posixHeader.every(function(field) {\n      if (field[0] == 'checksum') {\n        skipFrom = from + field[2];\n        skipTo = skipFrom + field[1];\n        return false;\n      }\n      return true;\n    });\n  }\n\n  var whitespace = ' '.charCodeAt(0);\n  for (var i = from; i < to; i++) {\n    // 262144 = 8^6 - 6 octal digits - maximum possible value for checksum;\n    // wrap to avoid numeric overflow\n    var byte = (i >= skipFrom) && (i < skipTo) ? whitespace : buffer[i];\n    result = (result + byte) % 262144;\n  }\n  return result;\n}\n\nmodule.exports.recordSize = recordSize;\nmodule.exports.defaultFileMode = defaultFileMode;\nmodule.exports.defaultUid = defaultUid;\nmodule.exports.defaultGid = defaultGid;\nmodule.exports.posixHeader = posixHeader;\nmodule.exports.effectiveHeaderSize = effectiveHeaderSize;\n\nmodule.exports.calculateChecksum = calculateChecksum;\nmodule.exports.formatTarString = formatTarString;\nmodule.exports.formatTarNumber = formatTarNumber;\nmodule.exports.formatTarDateTime = formatTarDateTime;\nmodule.exports.parseTarString = parseTarString;\nmodule.exports.parseTarNumber = parseTarNumber;\nmodule.exports.parseTarDateTime = parseTarDateTime;\n\n","'use strict';\n\nvar constants = require('./constants');\nvar utils = require('./utils');\nvar types = require('./types');\n\nfunction headerSize(file) {\n  // header has fixed size\n  return types.recordSize;\n}\n\nfunction dataSize(file) {\n  // align to record boundary\n  return Math.ceil(file.data.length / types.recordSize) * types.recordSize;\n}\n\nfunction allocateBuffer(files) {\n  var totalSize = 0;\n\n  // Calculate space that will be used by each file\n  files.forEach(function(file) {\n    totalSize += headerSize(file) + dataSize(file);\n  });\n\n  // TAR must end with two empty records\n  totalSize += types.recordSize * 2;\n\n  // Array SHOULD be initialized with zeros:\n  // from TypedArray constructor docs:\n  // > When creating a TypedArray instance (i.e. instance of Int8Array\n  // > or similar), an array buffer is created internally\n  // from ArrayBuffer constructor docs:\n  // > A new ArrayBuffer object of the specified size.\n  // > Its contents are initialized to 0.\n  return new Uint8Array(totalSize);\n}\n\nfunction writeHeader(buffer, file, offset) {\n  offset = parseInt(offset) || 0;\n\n  var currentOffset = offset;\n  types.posixHeader.forEach(function(field) {\n    var value = field[3](file, field);\n    var length = value.length;\n    for (var i = 0; i < length; i += 1) {\n      buffer[currentOffset + i] = value.charCodeAt(i) & 0xFF;\n    }\n    currentOffset += field[1];  // move to the next field\n  });\n\n  var field = utils.find(types.posixHeader, function(field) {\n    return field[0] == 'checksum';\n  });\n\n  if (field) {\n    // Patch checksum field\n    var checksum = types.calculateChecksum(buffer, offset, true);\n    var value = types.formatTarNumber(checksum, field[1] - 2) +\n      constants.NULL_CHAR + ' ';\n    currentOffset = offset + field[2];\n    for (var i = 0; i < value.length; i += 1) {\n      // put bytes\n      buffer[currentOffset] = value.charCodeAt(i) & 0xFF;\n      currentOffset++;\n    }\n  }\n\n  return offset + headerSize(file);\n}\n\nfunction writeData(buffer, file, offset) {\n  offset = parseInt(offset, 10) || 0;\n  buffer.set(file.data, offset);\n  return offset + dataSize(file);\n}\n\nfunction tar(files) {\n  files = utils.map(files, function(file) {\n    return utils.extend({}, file, {\n      data: utils.toUint8Array(file.data)\n    });\n  });\n\n  var buffer = allocateBuffer(files);\n\n  var offset = 0;\n  files.forEach(function(file) {\n    offset = writeHeader(buffer, file, offset);\n    offset = writeData(buffer, file, offset);\n  });\n\n  return buffer;\n}\n\nmodule.exports.tar = tar;\n","'use strict';\n\nvar constants = require('./constants');\nvar utils = require('./utils');\nvar types = require('./types');\n\nvar defaultOptions = {\n  extractData: true,\n  checkHeader: true,\n  checkChecksum: true,\n  checkFileSize: true\n};\n\nvar excludeFields = {\n  size: true,\n  checksum: true,\n  ustar: true\n};\n\nvar messages = {\n  unexpectedEndOfFile: 'Unexpected end of file.',\n  fileCorrupted: 'File is corrupted.',\n  checksumCheckFailed: 'Checksum check failed.'\n};\n\nfunction headerSize(header) {\n  // header has fixed size\n  return types.recordSize;\n}\n\nfunction dataSize(size) {\n  // align to record boundary\n  return Math.ceil(size / types.recordSize) * types.recordSize;\n}\n\nfunction isEndOfFile(buffer, offset) {\n  var from = offset;\n  var to = Math.min(buffer.length, offset + types.recordSize * 2);\n  for (var i = from; i < to; i++) {\n    if (buffer[i] != 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction readHeader(buffer, offset, options) {\n  if (buffer.length - offset < types.recordSize) {\n    if (options.checkFileSize) {\n      throw new Error(messages.unexpectedEndOfFile);\n    }\n    return null;\n  }\n\n  offset = parseInt(offset) || 0;\n\n  var result = {};\n  var currentOffset = offset;\n  types.posixHeader.forEach(function(field) {\n    result[field[0]] = field[4](buffer, currentOffset, field);\n    currentOffset += field[1];\n  });\n\n  if (result.type != 0) {  // only regular files can have data\n    result.size = 0;\n  }\n\n  if (options.checkHeader) {\n    types.posixHeader.forEach(function(field) {\n      if (utils.isFunction(field[5]) && !field[5](result, field)) {\n        var error = new Error(messages.fileCorrupted);\n        error.data = {\n          offset: offset + field[2],\n          field: field[0]\n        };\n        throw error;\n      }\n    });\n  }\n\n  if (options.checkChecksum) {\n    var checksum = types.calculateChecksum(buffer, offset, true);\n    if (checksum != result.checksum) {\n      var error = new Error(messages.checksumCheckFailed);\n      error.data = {\n        offset: offset,\n        header: result,\n        checksum: checksum\n      };\n      throw error;\n    }\n  }\n\n  return result;\n}\n\nfunction readData(buffer, offset, header, options) {\n  if (!options.extractData) {\n    return null;\n  }\n\n  if (header.size <= 0) {\n    return new Uint8Array();\n  }\n  return buffer.slice(offset, offset + header.size);\n}\n\nfunction createFile(header, data) {\n  var result = {};\n  types.posixHeader.forEach(function(field) {\n    var name = field[0];\n    if (!excludeFields[name]) {\n      result[name] = header[name];\n    }\n  });\n\n  result.isOldGNUFormat = header.ustar == constants.OLDGNU_MAGIC;\n\n  if (data) {\n    result.data = data;\n  }\n\n  return result;\n}\n\nfunction untar(buffer, options) {\n  options = utils.extend({}, defaultOptions, options);\n\n  var result = [];\n  var offset = 0;\n  var size = buffer.length;\n\n  while (size - offset >= types.recordSize) {\n    buffer = utils.toUint8Array(buffer);\n    var header = readHeader(buffer, offset, options);\n    if (!header) {\n      break;\n    }\n    offset += headerSize(header);\n\n    var data = readData(buffer, offset, header, options);\n    result.push(createFile(header, data));\n    offset += dataSize(header.size);\n\n    if (isEndOfFile(buffer, offset)) {\n      break;\n    }\n  }\n\n  return result;\n}\n\nmodule.exports.untar = untar;\n","'use strict';\n\n// http://www.gnu.org/software/tar/manual/html_node/Standard.html\n\nvar utils = require('./lib/utils');\nvar constants = require('./lib/constants');\nvar tar = require('./lib/tar');\nvar untar = require('./lib/untar');\n\nutils.extend(module.exports, tar, untar, constants);\n","import { tar, untar, type TarFile, REGTYPE, DIRTYPE } from 'tinytar'\nimport { FS } from '../postgresMod.js'\nimport { PGDATA } from './index.js'\n\nexport type DumpTarCompressionOptions = 'none' | 'gzip' | 'auto'\n\nexport async function dumpTar(\n  FS: FS,\n  dbname?: string,\n  compression: DumpTarCompressionOptions = 'auto',\n): Promise<File | Blob> {\n  const tarball = createTarball(FS, PGDATA)\n  const [compressed, zipped] = await maybeZip(tarball, compression)\n  const filename = (dbname || 'pgdata') + (zipped ? '.tar.gz' : '.tar')\n  const type = zipped ? 'application/x-gzip' : 'application/x-tar'\n  if (typeof File !== 'undefined') {\n    return new File([compressed], filename, {\n      type,\n    })\n  } else {\n    return new Blob([compressed], {\n      type,\n    })\n  }\n}\n\nconst compressedMimeTypes = [\n  'application/x-gtar',\n  'application/x-tar+gzip',\n  'application/x-gzip',\n  'application/gzip',\n]\n\nexport async function loadTar(FS: FS, file: File | Blob): Promise<void> {\n  let tarball = new Uint8Array(await file.arrayBuffer())\n  const filename =\n    typeof File !== 'undefined' && file instanceof File ? file.name : undefined\n  const compressed =\n    compressedMimeTypes.includes(file.type) ||\n    filename?.endsWith('.tgz') ||\n    filename?.endsWith('.tar.gz')\n  if (compressed) {\n    tarball = await unzip(tarball)\n  }\n\n  const files = untar(tarball)\n  for (const file of files) {\n    const filePath = PGDATA + file.name\n\n    // Ensure the directory structure exists\n    const dirPath = filePath.split('/').slice(0, -1)\n    for (let i = 1; i <= dirPath.length; i++) {\n      const dir = dirPath.slice(0, i).join('/')\n      if (!FS.analyzePath(dir).exists) {\n        FS.mkdir(dir)\n      }\n    }\n\n    // Write the file or directory\n    if (file.type === REGTYPE) {\n      FS.writeFile(filePath, file.data)\n      FS.utime(\n        filePath,\n        dateToUnixTimestamp(file.modifyTime),\n        dateToUnixTimestamp(file.modifyTime),\n      )\n    } else if (file.type === DIRTYPE) {\n      FS.mkdir(filePath)\n    }\n  }\n}\n\nfunction readDirectory(FS: FS, path: string) {\n  const files: TarFile[] = []\n\n  const traverseDirectory = (currentPath: string) => {\n    const entries = FS.readdir(currentPath)\n    entries.forEach((entry) => {\n      if (entry === '.' || entry === '..') {\n        return\n      }\n      const fullPath = currentPath + '/' + entry\n      const stats = FS.stat(fullPath)\n      const data = FS.isFile(stats.mode)\n        ? FS.readFile(fullPath, { encoding: 'binary' })\n        : new Uint8Array(0)\n      files.push({\n        name: fullPath.substring(path.length), // remove the root path\n        mode: stats.mode,\n        size: stats.size,\n        type: FS.isFile(stats.mode) ? REGTYPE : DIRTYPE,\n        modifyTime: stats.mtime,\n        data,\n      })\n      if (FS.isDir(stats.mode)) {\n        traverseDirectory(fullPath)\n      }\n    })\n  }\n\n  traverseDirectory(path)\n  return files\n}\n\nexport function createTarball(FS: FS, directoryPath: string) {\n  const files = readDirectory(FS, directoryPath)\n  const tarball = tar(files)\n  return tarball\n}\n\nexport async function maybeZip(\n  file: Uint8Array,\n  compression: DumpTarCompressionOptions = 'auto',\n): Promise<[Uint8Array, boolean]> {\n  if (compression === 'none') {\n    return [file, false]\n  } else if (typeof CompressionStream !== 'undefined') {\n    return [await zipBrowser(file), true]\n  } else if (\n    typeof process !== 'undefined' &&\n    process.versions &&\n    process.versions.node\n  ) {\n    return [await zipNode(file), true]\n  } else if (compression === 'auto') {\n    return [file, false]\n  } else {\n    throw new Error('Compression not supported in this environment')\n  }\n}\n\nexport async function zipBrowser(file: Uint8Array): Promise<Uint8Array> {\n  const cs = new CompressionStream('gzip')\n  const writer = cs.writable.getWriter()\n  const reader = cs.readable.getReader()\n\n  writer.write(file)\n  writer.close()\n\n  const chunks: Uint8Array[] = []\n\n  while (true) {\n    const { value, done } = await reader.read()\n    if (done) break\n    if (value) chunks.push(value)\n  }\n\n  const compressed = new Uint8Array(\n    chunks.reduce((acc, chunk) => acc + chunk.length, 0),\n  )\n  let offset = 0\n  chunks.forEach((chunk) => {\n    compressed.set(chunk, offset)\n    offset += chunk.length\n  })\n\n  return compressed\n}\n\nexport async function zipNode(file: Uint8Array): Promise<Uint8Array> {\n  const { promisify } = await import('util')\n  const { gzip } = await import('zlib')\n  const gzipPromise = promisify(gzip)\n  return await gzipPromise(file)\n}\n\nexport async function unzip(file: Uint8Array): Promise<Uint8Array> {\n  if (typeof CompressionStream !== 'undefined') {\n    return await unzipBrowser(file)\n  } else if (\n    typeof process !== 'undefined' &&\n    process.versions &&\n    process.versions.node\n  ) {\n    return await unzipNode(file)\n  } else {\n    throw new Error('Unsupported environment for decompression')\n  }\n}\n\nexport async function unzipBrowser(file: Uint8Array): Promise<Uint8Array> {\n  const ds = new DecompressionStream('gzip')\n  const writer = ds.writable.getWriter()\n  const reader = ds.readable.getReader()\n\n  writer.write(file)\n  writer.close()\n\n  const chunks: Uint8Array[] = []\n\n  while (true) {\n    const { value, done } = await reader.read()\n    if (done) break\n    if (value) chunks.push(value)\n  }\n\n  const decompressed = new Uint8Array(\n    chunks.reduce((acc, chunk) => acc + chunk.length, 0),\n  )\n  let offset = 0\n  chunks.forEach((chunk) => {\n    decompressed.set(chunk, offset)\n    offset += chunk.length\n  })\n\n  return decompressed\n}\n\nexport async function unzipNode(file: Uint8Array): Promise<Uint8Array> {\n  const { promisify } = await import('util')\n  const { gunzip } = await import('zlib')\n  const gunzipPromise = promisify(gunzip)\n  return await gunzipPromise(file)\n}\n\nfunction dateToUnixTimestamp(date: Date | number | undefined): number {\n  if (!date) {\n    return Math.floor(Date.now() / 1000)\n  } else {\n    return typeof date === 'number' ? date : Math.floor(date.getTime() / 1000)\n  }\n}\n","import { FilesystemBase } from './types.js'\nimport type { FS, PostgresMod } from '../postgresMod.js'\nimport { PGDATA } from './index.js'\nimport { dumpTar, type DumpTarCompressionOptions } from './tarUtils.js'\n\nexport class IdbFs extends FilesystemBase {\n  async emscriptenOpts(opts: Partial<PostgresMod>) {\n    const options: Partial<PostgresMod> = {\n      ...opts,\n      preRun: [\n        ...(opts.preRun || []),\n        (mod: any) => {\n          const idbfs = mod.FS.filesystems.IDBFS\n          // Mount the idbfs to the users dataDir then symlink the PGDATA to the\n          // idbfs mount point.\n          // We specifically use /pglite as the root directory for the idbfs\n          // as the fs will ber persisted in the indexeddb as a database with\n          // the path as the name.\n          mod.FS.mkdir(`/pglite`)\n          mod.FS.mkdir(`/pglite/${this.dataDir}`)\n          mod.FS.mount(idbfs, {}, `/pglite/${this.dataDir}`)\n          mod.FS.symlink(`/pglite/${this.dataDir}`, PGDATA)\n        },\n      ],\n    }\n    return options\n  }\n\n  initialSyncFs(fs: FS) {\n    return new Promise<void>((resolve, reject) => {\n      fs.syncfs(true, (err: any) => {\n        if (err) {\n          reject(err)\n        } else {\n          resolve()\n        }\n      })\n    })\n  }\n\n  syncToFs(fs: FS, _relaxedDurability?: boolean) {\n    return new Promise<void>((resolve, reject) => {\n      fs.syncfs(false, (err: any) => {\n        if (err) {\n          reject(err)\n        } else {\n          resolve()\n        }\n      })\n    })\n  }\n\n  async dumpTar(\n    mod: FS,\n    dbname: string,\n    compression?: DumpTarCompressionOptions,\n  ) {\n    return dumpTar(mod, dbname, compression)\n  }\n\n  async close(FS: FS): Promise<void> {\n    // IDBDatabase.close() method is essentially async, but returns immediately,\n    // the database will be closed when all transactions are complete.\n    // This needs to be handled in application code if you want to delete the\n    // database after it has been closed. If you try to delete the database\n    // before it has fully closed it will throw a blocking error.\n    const indexedDb = FS.filesystems.IDBFS.dbs[this.dataDir!]\n    if (indexedDb) {\n      indexedDb.close()\n    }\n    FS.quit()\n  }\n}\n","import { FilesystemBase } from './types.js'\nimport type { PostgresMod, FS } from '../postgresMod.js'\nimport { dumpTar, type DumpTarCompressionOptions } from './tarUtils.js'\n\nexport class MemoryFS extends FilesystemBase {\n  async emscriptenOpts(opts: Partial<PostgresMod>) {\n    // Nothing to do for memoryfs\n    return opts\n  }\n\n  async dumpTar(\n    mod: FS,\n    dbname: string,\n    compression?: DumpTarCompressionOptions,\n  ) {\n    return dumpTar(mod, dbname, compression)\n  }\n\n  async close(FS: FS): Promise<void> {\n    FS.quit()\n  }\n}\n","import * as fs from 'fs'\nimport * as path from 'path'\nimport { FilesystemBase } from './types.js'\nimport { PGDATA } from './index.js'\nimport type { PostgresMod, FS } from '../postgresMod.js'\nimport { dumpTar, type DumpTarCompressionOptions } from './tarUtils.js'\n\nexport class NodeFS extends FilesystemBase {\n  protected rootDir: string\n\n  constructor(dataDir: string) {\n    super(dataDir)\n    this.rootDir = path.resolve(dataDir)\n    if (!fs.existsSync(path.join(this.rootDir))) {\n      fs.mkdirSync(this.rootDir)\n    }\n  }\n\n  async emscriptenOpts(opts: Partial<PostgresMod>) {\n    const options: Partial<PostgresMod> = {\n      ...opts,\n      preRun: [\n        ...(opts.preRun || []),\n        (mod: any) => {\n          const nodefs = mod.FS.filesystems.NODEFS\n          mod.FS.mkdir(PGDATA)\n          mod.FS.mount(nodefs, { root: this.rootDir }, PGDATA)\n        },\n      ],\n    }\n    return options\n  }\n\n  async dumpTar(\n    mod: FS,\n    dbname: string,\n    compression?: DumpTarCompressionOptions,\n  ) {\n    return dumpTar(mod, dbname, compression)\n  }\n\n  async close(FS: FS): Promise<void> {\n    FS.quit()\n  }\n}\n","export type FsStats = {\n  dev: number\n  ino: number\n  mode: number\n  nlink: number\n  uid: number\n  gid: number\n  rdev: number\n  size: number\n  blksize: number\n  blocks: number\n  atime: number\n  mtime: number\n  ctime: number\n}\n\n// TypeScript doesn't have a built-in type for FileSystemSyncAccessHandle\nexport interface FileSystemSyncAccessHandle {\n  close(): void\n  flush(): void\n  getSize(): number\n  read(buffer: ArrayBuffer, options: { at: number }): number\n  truncate(newSize: number): void\n  write(buffer: ArrayBuffer, options: { at: number }): number\n}\n\nexport const ERRNO_CODES = {\n  EBADF: 8,\n  EBADFD: 127,\n  EEXIST: 20,\n  EINVAL: 28,\n  EISDIR: 31,\n  ENODEV: 43,\n  ENOENT: 44,\n  ENOTDIR: 54,\n  ENOTEMPTY: 55,\n} as const\n\nexport class FsError extends Error {\n  code?: number\n  constructor(code: number | keyof typeof ERRNO_CODES | null, message: string) {\n    super(message)\n    if (typeof code === 'number') {\n      this.code = code\n    } else if (typeof code === 'string') {\n      this.code = ERRNO_CODES[code]\n    }\n  }\n}\n\n// State\n\nexport interface State {\n  root: DirectoryNode\n  pool: PoolFilenames\n}\n\nexport type PoolFilenames = Array<string>\n\n// WAL\n\nexport interface WALEntry {\n  opp: string\n  args: any[]\n}\n\n// Node tree\n\nexport type NodeType = 'file' | 'directory'\n\ninterface BaseNode {\n  type: NodeType\n  lastModified: number\n  mode: number\n}\n\nexport interface FileNode extends BaseNode {\n  type: 'file'\n  backingFilename: string\n}\n\nexport interface DirectoryNode extends BaseNode {\n  type: 'directory'\n  children: { [filename: string]: Node }\n}\n\nexport type Node = FileNode | DirectoryNode\n","import type { PostgresMod } from '../../postgresMod.js'\nimport type { OpfsAhp } from './opfsAhp.js'\nimport { ERRNO_CODES } from './types.js'\n\nexport type FileSystemType = Emscripten.FileSystemType & {\n  createNode: (\n    parent: FSNode | null,\n    name: string,\n    mode: number,\n    dev?: any,\n  ) => FSNode\n  node_ops: FS.NodeOps\n  stream_ops: FS.StreamOps & {\n    dup: (stream: FSStream) => void\n    mmap: (\n      stream: FSStream,\n      length: number,\n      position: number,\n      prot: any,\n      flags: any,\n    ) => { ptr: number; allocated: boolean }\n    msync: (\n      stream: FSStream,\n      buffer: Uint8Array,\n      offset: number,\n      length: number,\n      mmapFlags: any,\n    ) => number\n  }\n} & { [key: string]: any }\n\ntype FSNode = FS.FSNode & {\n  node_ops: FS.NodeOps\n  stream_ops: FS.StreamOps\n}\n\ntype FSStream = FS.FSStream & {\n  node: FSNode\n  shared: {\n    refcount: number\n  }\n}\n\nexport interface OpfsMount extends FS.Mount {\n  opts: {\n    root: string\n  }\n}\n\ntype OpfsNode = FSNode\n\ntype EmscriptenFS = PostgresMod['FS'] & {\n  createNode: (\n    parent: FSNode | null,\n    name: string,\n    mode: number,\n    dev?: any,\n  ) => FSNode\n}\n\n/**\n * Create an emscripten filesystem that uses the AHP filesystem.\n * @param Module The emscripten module\n * @param opfsAhp The AHP filesystem - see `OpfsAhp.ts`\n * @returns The emscripten filesystem\n */\nexport const createOPFSAHP = (Module: PostgresMod, opfsAhp: OpfsAhp) => {\n  const FS = Module.FS as EmscriptenFS\n  const OPFS = {\n    tryFSOperation<T>(f: () => T): T {\n      try {\n        return f()\n      } catch (e: any) {\n        if (!e.code) throw e\n        if (e.code === 'UNKNOWN') throw new FS.ErrnoError(ERRNO_CODES.EINVAL)\n        throw new FS.ErrnoError(e.code)\n      }\n    },\n    mount(_mount: OpfsMount): FSNode {\n      return OPFS.createNode(null, '/', 16384 | 511, 0)\n    },\n    syncfs(\n      _mount: FS.Mount,\n      _populate: any, // This has the wrong type in @types/emscripten\n      _done: (err?: number | null) => unknown,\n    ): void {\n      // noop\n    },\n    createNode(\n      parent: FSNode | null,\n      name: string,\n      mode: number,\n      _dev?: any,\n    ): OpfsNode {\n      if (!FS.isDir(mode) && !FS.isFile(mode)) {\n        throw new FS.ErrnoError(28)\n      }\n      const node = FS.createNode(parent, name, mode)\n      node.node_ops = OPFS.node_ops\n      node.stream_ops = OPFS.stream_ops\n      return node\n    },\n    getMode: function (path: string): number {\n      log('getMode', path)\n      return OPFS.tryFSOperation(() => {\n        const stats = opfsAhp.lstat(path)\n        return stats.mode\n      })\n    },\n    realPath: function (node: FSNode): string {\n      const parts: string[] = []\n      while (node.parent !== node) {\n        parts.push(node.name)\n        node = node.parent as FSNode\n      }\n      parts.push((node.mount as OpfsMount).opts.root)\n      parts.reverse()\n      return parts.join('/')\n    },\n    node_ops: {\n      getattr(node: OpfsNode): FS.Stats {\n        log('getattr', OPFS.realPath(node))\n        const path = OPFS.realPath(node)\n        return OPFS.tryFSOperation(() => {\n          const stats = opfsAhp.lstat(path)\n          return {\n            ...stats,\n            dev: 0,\n            ino: node.id,\n            nlink: 1,\n            rdev: node.rdev,\n            atime: new Date(stats.atime),\n            mtime: new Date(stats.mtime),\n            ctime: new Date(stats.ctime),\n          }\n        })\n      },\n      setattr(node: OpfsNode, attr: FS.Stats): void {\n        log('setattr', OPFS.realPath(node), attr)\n        const path = OPFS.realPath(node)\n        OPFS.tryFSOperation(() => {\n          if (attr.mode !== undefined) {\n            opfsAhp.chmod(path, attr.mode)\n          }\n          if (attr.size !== undefined) {\n            opfsAhp.truncate(path, attr.size)\n          }\n          if (attr.timestamp !== undefined) {\n            opfsAhp.utimes(path, attr.timestamp, attr.timestamp)\n          }\n          if (attr.size !== undefined) {\n            opfsAhp.truncate(path, attr.size)\n          }\n        })\n      },\n      lookup(parent: FSNode, name: string): OpfsNode {\n        log('lookup', OPFS.realPath(parent), name)\n        const path = [OPFS.realPath(parent), name].join('/')\n        const mode = OPFS.getMode(path)\n        return OPFS.createNode(parent, name, mode)\n      },\n      mknod(\n        parent: FSNode,\n        name: string,\n        mode: number,\n        dev: unknown,\n      ): OpfsNode {\n        log('mknod', OPFS.realPath(parent), name, mode, dev)\n        const node = OPFS.createNode(parent, name, mode, dev)\n        // create the backing node for this in the fs root as well\n        const path = OPFS.realPath(node)\n        return OPFS.tryFSOperation(() => {\n          if (FS.isDir(node.mode)) {\n            opfsAhp.mkdir(path, { mode })\n          } else {\n            opfsAhp.writeFile(path, '', { mode })\n          }\n          return node\n        })\n      },\n      rename(oldNode: OpfsNode, newDir: OpfsNode, newName: string): void {\n        log('rename', OPFS.realPath(oldNode), OPFS.realPath(newDir), newName)\n        const oldPath = OPFS.realPath(oldNode)\n        const newPath = [OPFS.realPath(newDir), newName].join('/')\n        OPFS.tryFSOperation(() => {\n          opfsAhp.rename(oldPath, newPath)\n        })\n        oldNode.name = newName\n      },\n      unlink(parent: OpfsNode, name: string): void {\n        log('unlink', OPFS.realPath(parent), name)\n        const path = [OPFS.realPath(parent), name].join('/')\n        try {\n          opfsAhp.unlink(path)\n        } catch (e: any) {\n          // no-op\n        }\n      },\n      rmdir(parent: OpfsNode, name: string): void {\n        log('rmdir', OPFS.realPath(parent), name)\n        const path = [OPFS.realPath(parent), name].join('/')\n        return OPFS.tryFSOperation(() => {\n          opfsAhp.rmdir(path)\n        })\n      },\n      readdir(node: OpfsNode): string[] {\n        log('readdir', OPFS.realPath(node))\n        const path = OPFS.realPath(node)\n        return OPFS.tryFSOperation(() => {\n          return opfsAhp.readdir(path)\n        })\n      },\n      symlink(parent: FSNode, newName: string, oldPath: string): void {\n        log('symlink', OPFS.realPath(parent), newName, oldPath)\n        // This is not supported by OPFS\n        throw new FS.ErrnoError(63)\n      },\n      readlink(node: FSNode): string {\n        log('readlink', OPFS.realPath(node))\n        // This is not supported by OPFS\n        throw new FS.ErrnoError(63)\n      },\n    },\n    stream_ops: {\n      open(stream: FSStream): void {\n        log('open stream', OPFS.realPath(stream.node))\n        const path = OPFS.realPath(stream.node)\n        return OPFS.tryFSOperation(() => {\n          if (FS.isFile(stream.node.mode)) {\n            stream.shared.refcount = 1\n            stream.nfd = opfsAhp.open(path)\n          }\n        })\n      },\n      close(stream: FSStream): void {\n        log('close stream', OPFS.realPath(stream.node))\n        return OPFS.tryFSOperation(() => {\n          if (\n            FS.isFile(stream.node.mode) &&\n            stream.nfd &&\n            --stream.shared.refcount === 0\n          ) {\n            opfsAhp.close(stream.nfd)\n          }\n        })\n      },\n      dup(stream: FSStream) {\n        log('dup stream', OPFS.realPath(stream.node))\n        stream.shared.refcount++\n      },\n      read(\n        stream: FSStream, // Stream to read from\n        buffer: Uint8Array, // Buffer to read into - Wrong type in @types/emscripten\n        offset: number, // Offset in buffer to start writing to\n        length: number, // Number of bytes to read\n        position: number, // Position in file to read from\n      ): number {\n        log('read stream', OPFS.realPath(stream.node), offset, length, position)\n        if (length === 0) return 0\n        const ret = OPFS.tryFSOperation(() =>\n          opfsAhp.read(\n            stream.nfd!,\n            buffer as unknown as Int8Array,\n            offset,\n            length,\n            position,\n          ),\n        )\n        return ret\n      },\n      write(\n        stream: FSStream, // Stream to write to\n        buffer: Uint8Array, // Buffer to read from - Wrong type in @types/emscripten\n        offset: number, // Offset in buffer to start writing from\n        length: number, // Number of bytes to write\n        position: number, // Position in file to write to\n      ): number {\n        log(\n          'write stream',\n          OPFS.realPath(stream.node),\n          offset,\n          length,\n          position,\n        )\n        return OPFS.tryFSOperation(() =>\n          opfsAhp.write(\n            stream.nfd!,\n            buffer.buffer as unknown as Int8Array,\n            offset,\n            length,\n            position,\n          ),\n        )\n      },\n      llseek(stream: FSStream, offset: number, whence: number): number {\n        log('llseek stream', OPFS.realPath(stream.node), offset, whence)\n        let position = offset\n        if (whence === 1) {\n          position += stream.position\n        } else if (whence === 2) {\n          if (FS.isFile(stream.node.mode)) {\n            OPFS.tryFSOperation(() => {\n              const stat = opfsAhp.fstat(stream.nfd!)\n              position += stat.size\n            })\n          }\n        }\n        if (position < 0) {\n          throw new FS.ErrnoError(28)\n        }\n        return position\n      },\n      mmap(\n        stream: FSStream,\n        length: number,\n        position: number,\n        prot: any,\n        flags: any,\n      ) {\n        log(\n          'mmap stream',\n          OPFS.realPath(stream.node),\n          length,\n          position,\n          prot,\n          flags,\n        )\n        if (!FS.isFile(stream.node.mode)) {\n          throw new FS.ErrnoError(ERRNO_CODES.ENODEV)\n        }\n\n        const ptr = (Module as any).mmapAlloc(length) // TODO: Fix type and check this is exported\n\n        OPFS.stream_ops.read(\n          stream,\n          Module.HEAP8 as unknown as Uint8Array,\n          ptr,\n          length,\n          position,\n        )\n        return { ptr, allocated: true }\n      },\n      msync(\n        stream: FSStream,\n        buffer: Uint8Array,\n        offset: number,\n        length: number,\n        mmapFlags: any,\n      ) {\n        log(\n          'msync stream',\n          OPFS.realPath(stream.node),\n          offset,\n          length,\n          mmapFlags,\n        )\n        OPFS.stream_ops.write(stream, buffer, 0, length, offset)\n        return 0\n      },\n    },\n  } satisfies FileSystemType\n  return OPFS\n}\n\nfunction log(..._args: any[]) {\n  // console.log(...args);\n}\n","import { FsError } from './types.js'\nimport type {\n  FsStats,\n  State,\n  FileSystemSyncAccessHandle,\n  Node,\n  FileNode,\n  DirectoryNode,\n  WALEntry,\n} from './types.js'\n\nconst STATE_FILE = 'state.txt'\nconst DATA_DIR = 'data'\nconst INITIAL_MODE = {\n  DIR: 16384,\n  FILE: 32768,\n}\n\nexport interface OpfsAhpOptions {\n  root: string\n  initialPoolSize?: number\n  maintainedPoolSize?: number\n}\n\n/**\n * An OPFS Access Handle Pool VFS that exports a Node.js-like FS interface.\n * This FS is then wrapped by an Emscripten FS interface in emscriptenFs.ts.\n */\nexport class OpfsAhp {\n  readyPromise: Promise<void>\n  #ready = false\n\n  readonly root: string\n  readonly initialPoolSize: number\n  readonly maintainedPoolSize: number\n\n  #opfsRootAh!: FileSystemDirectoryHandle\n  #rootAh!: FileSystemDirectoryHandle\n  #dataDirAh!: FileSystemDirectoryHandle\n\n  #stateFH!: FileSystemFileHandle\n  #stateSH!: FileSystemSyncAccessHandle\n\n  #fh: Map<string, FileSystemFileHandle> = new Map()\n  #sh: Map<string, FileSystemSyncAccessHandle> = new Map()\n\n  #handleIdCounter = 0\n  #openHandlePaths: Map<number, string> = new Map()\n  #openHandleIds: Map<string, number> = new Map()\n\n  state!: State\n  lastCheckpoint = 0\n  checkpointInterval = 1000 * 60 // 1 minute\n  poolCounter = 0\n\n  #unsyncedSH = new Set<FileSystemSyncAccessHandle>()\n\n  constructor({ root, initialPoolSize, maintainedPoolSize }: OpfsAhpOptions) {\n    this.root = root\n    this.initialPoolSize = initialPoolSize || 1000\n    this.maintainedPoolSize = maintainedPoolSize || 100\n    this.readyPromise = this.#init()\n  }\n\n  static async create(options: OpfsAhpOptions) {\n    const instance = new OpfsAhp(options)\n    await instance.readyPromise\n    return instance\n  }\n\n  async #init() {\n    this.#opfsRootAh = await navigator.storage.getDirectory()\n    this.#rootAh = await this.#resolveOpfsDirectory(this.root, {\n      create: true,\n    })\n    this.#dataDirAh = await this.#resolveOpfsDirectory(DATA_DIR, {\n      from: this.#rootAh,\n      create: true,\n    })\n\n    this.#stateFH = await this.#rootAh.getFileHandle(STATE_FILE, {\n      create: true,\n    })\n    this.#stateSH = await (this.#stateFH as any).createSyncAccessHandle()\n\n    const stateAB = new ArrayBuffer(this.#stateSH.getSize())\n    this.#stateSH.read(stateAB, { at: 0 })\n    let state: State\n    const stateLines = new TextDecoder().decode(stateAB).split('\\n')\n    // Line 1 is a base state object.\n    // Lines 1+n are WAL entries.\n\n    let isNewState = false\n    try {\n      state = JSON.parse(stateLines[0])\n    } catch (e) {\n      state = {\n        root: {\n          type: 'directory',\n          lastModified: Date.now(),\n          mode: INITIAL_MODE.DIR,\n          children: {},\n        },\n        pool: [],\n      }\n      // write new state to file\n      this.#stateSH.truncate(0)\n      this.#stateSH.write(new TextEncoder().encode(JSON.stringify(state)), {\n        at: 0,\n      })\n      isNewState = true\n    }\n    this.state = state\n\n    // Apply WAL entries\n    const wal = stateLines\n      .slice(1)\n      .filter(Boolean)\n      .map((line) => JSON.parse(line))\n    for (const entry of wal) {\n      const methodName = `_${entry.opp}State`\n      if (typeof this[methodName as keyof this] === 'function') {\n        try {\n          const method = this[methodName as keyof this] as any\n          method.bind(this)(...entry.args)\n        } catch (e) {\n          console.warn('Error applying OPFS AHP WAL entry', entry, e)\n        }\n      }\n    }\n\n    // Open all file handles for dir tree\n    const walkPromises: Promise<void>[] = []\n    const walk = async (node: Node) => {\n      if (node.type === 'file') {\n        try {\n          const fh = await this.#dataDirAh.getFileHandle(node.backingFilename)\n          const sh: FileSystemSyncAccessHandle = await (\n            fh as any\n          ).createSyncAccessHandle()\n          this.#fh.set(node.backingFilename, fh)\n\n          this.#sh.set(node.backingFilename, sh)\n        } catch (e) {\n          console.error('Error opening file handle for node', node, e)\n        }\n      } else {\n        for (const child of Object.values(node.children)) {\n          walkPromises.push(walk(child))\n        }\n      }\n    }\n    await walk(this.state.root)\n\n    // Open all pool file handles\n    const poolPromises: Promise<void>[] = []\n    for (const filename of this.state.pool) {\n      poolPromises.push(\n        // eslint-disable-next-line no-async-promise-executor\n        new Promise<void>(async (resolve) => {\n          if (this.#fh.has(filename)) {\n            console.warn('File handle already exists for pool file', filename)\n          }\n          const fh = await this.#dataDirAh.getFileHandle(filename)\n          const sh: FileSystemSyncAccessHandle = await (\n            fh as any\n          ).createSyncAccessHandle()\n          this.#fh.set(filename, fh)\n          this.#sh.set(filename, sh)\n          resolve()\n        }),\n      )\n    }\n\n    await Promise.all([...walkPromises, ...poolPromises])\n\n    await this.maintainPool(\n      isNewState ? this.initialPoolSize : this.maintainedPoolSize,\n    )\n\n    this.#ready = true\n  }\n\n  get ready() {\n    return this.#ready\n  }\n\n  async maintainPool(size?: number) {\n    size = size || this.maintainedPoolSize\n    const change = size - this.state.pool.length\n    const promises: Promise<void>[] = []\n    for (let i = 0; i < change; i++) {\n      promises.push(\n        // eslint-disable-next-line no-async-promise-executor\n        new Promise<void>(async (resolve) => {\n          ++this.poolCounter\n          const filename = `${(Date.now() - 1704063600).toString(16).padStart(8, '0')}-${this.poolCounter.toString(16).padStart(8, '0')}`\n          const fh = await this.#dataDirAh.getFileHandle(filename, {\n            create: true,\n          })\n          const sh: FileSystemSyncAccessHandle = await (\n            fh as any\n          ).createSyncAccessHandle()\n          this.#fh.set(filename, fh)\n          this.#sh.set(filename, sh)\n          this.#logWAL({\n            opp: 'createPoolFile',\n            args: [filename],\n          })\n          this.state.pool.push(filename)\n          resolve()\n        }),\n      )\n    }\n    for (let i = 0; i > change; i--) {\n      promises.push(\n        // eslint-disable-next-line no-async-promise-executor\n        new Promise<void>(async (resolve) => {\n          const filename = this.state.pool.pop()!\n          this.#logWAL({\n            opp: 'deletePoolFile',\n            args: [filename],\n          })\n          const fh = this.#fh.get(filename)!\n          const sh = this.#sh.get(filename)\n          sh?.close()\n          // @ts-ignore outdated type? need to check\n          await fh.remove().then(() => {\n            this.#fh.delete(filename)\n            this.#sh.delete(filename)\n            resolve()\n          })\n        }),\n      )\n    }\n    await Promise.all(promises)\n  }\n\n  _createPoolFileState(filename: string) {\n    this.state.pool.push(filename)\n  }\n\n  _deletePoolFileState(filename: string) {\n    const index = this.state.pool.indexOf(filename)\n    if (index > -1) {\n      this.state.pool.splice(index, 1)\n    }\n  }\n\n  async maybeCheckpointState() {\n    if (Date.now() - this.lastCheckpoint > this.checkpointInterval) {\n      await this.checkpointState()\n    }\n  }\n\n  async checkpointState() {\n    const stateAB = new TextEncoder().encode(JSON.stringify(this.state))\n    this.#stateSH.truncate(0)\n    this.#stateSH.write(stateAB, { at: 0 })\n    this.#stateSH.flush()\n    this.lastCheckpoint = Date.now()\n  }\n\n  flush() {\n    for (const sh of this.#unsyncedSH) {\n      try {\n        sh.flush()\n      } catch (e) {\n        // The file may have been closed if it was deleted\n      }\n    }\n    this.#unsyncedSH.clear()\n  }\n\n  exit(): void {\n    for (const sh of this.#sh.values()) {\n      sh.close()\n    }\n    this.#stateSH.flush()\n    this.#stateSH.close()\n  }\n\n  // Filesystem API:\n\n  chmod(path: string, mode: number): void {\n    this.#tryWithWAL({ opp: 'chmod', args: [path, mode] }, () => {\n      this._chmodState(path, mode)\n    })\n  }\n\n  _chmodState(path: string, mode: number): void {\n    const node = this.#resolvePath(path)\n    node.mode = mode\n  }\n\n  close(fd: number): void {\n    const path = this.#getPathFromFd(fd)\n    this.#openHandlePaths.delete(fd)\n    this.#openHandleIds.delete(path)\n  }\n\n  fstat(fd: number): FsStats {\n    const path = this.#getPathFromFd(fd)\n    return this.lstat(path)\n  }\n\n  lstat(path: string): FsStats {\n    const node = this.#resolvePath(path)\n    const size =\n      node.type === 'file' ? this.#sh.get(node.backingFilename)!.getSize() : 0\n    const blksize = 4096\n    return {\n      dev: 0,\n      ino: 0,\n      mode: node.mode,\n      nlink: 1,\n      uid: 0,\n      gid: 0,\n      rdev: 0,\n      size,\n      blksize,\n      blocks: Math.ceil(size / blksize),\n      atime: node.lastModified,\n      mtime: node.lastModified,\n      ctime: node.lastModified,\n    }\n  }\n\n  mkdir(path: string, options?: { recursive?: boolean; mode?: number }): void {\n    this.#tryWithWAL({ opp: 'mkdir', args: [path, options] }, () => {\n      this._mkdirState(path, options)\n    })\n  }\n\n  _mkdirState(\n    path: string,\n    options?: { recursive?: boolean; mode?: number },\n  ): void {\n    const parts = this.#pathParts(path)\n    const newDirName = parts.pop()!\n    const currentPath: string[] = []\n    let node = this.state.root\n    for (const part of parts) {\n      currentPath.push(path)\n      if (!Object.prototype.hasOwnProperty.call(node.children, part)) {\n        if (options?.recursive) {\n          this.mkdir(currentPath.join('/'))\n        } else {\n          throw new FsError('ENOENT', 'No such file or directory')\n        }\n      }\n      if (node.children[part].type !== 'directory') {\n        throw new FsError('ENOTDIR', 'Not a directory')\n      }\n      node = node.children[part] as DirectoryNode\n    }\n    if (Object.prototype.hasOwnProperty.call(node.children, newDirName)) {\n      throw new FsError('EEXIST', 'File exists')\n    }\n    const newDir: DirectoryNode = {\n      type: 'directory',\n      lastModified: Date.now(),\n      mode: options?.mode || INITIAL_MODE.DIR,\n      children: {},\n    }\n    node.children[newDirName] = newDir\n  }\n\n  open(path: string, _flags?: string, _mode?: number): number {\n    const node = this.#resolvePath(path)\n    if (node.type !== 'file') {\n      throw new FsError('EISDIR', 'Is a directory')\n    }\n    const handleId = this.#nextHandleId()\n    this.#openHandlePaths.set(handleId, path)\n    this.#openHandleIds.set(path, handleId)\n    return handleId\n  }\n\n  readdir(path: string): string[] {\n    const node = this.#resolvePath(path)\n    if (node.type !== 'directory') {\n      throw new FsError('ENOTDIR', 'Not a directory')\n    }\n    return Object.keys(node.children)\n  }\n\n  read(\n    fd: number,\n    buffer: Int8Array, // Buffer to read into\n    offset: number, // Offset in buffer to start writing to\n    length: number, // Number of bytes to read\n    position: number, // Position in file to read from\n  ): number {\n    const path = this.#getPathFromFd(fd)\n    const node = this.#resolvePath(path)\n    if (node.type !== 'file') {\n      throw new FsError('EISDIR', 'Is a directory')\n    }\n    const sh = this.#sh.get(node.backingFilename)!\n    return sh.read(new Int8Array(buffer.buffer, offset, length), {\n      at: position,\n    })\n  }\n\n  rename(oldPath: string, newPath: string): void {\n    this.#tryWithWAL({ opp: 'rename', args: [oldPath, newPath] }, () => {\n      this._renameState(oldPath, newPath, true)\n    })\n  }\n\n  _renameState(oldPath: string, newPath: string, doFileOps = false): void {\n    const oldPathParts = this.#pathParts(oldPath)\n    const oldFilename = oldPathParts.pop()!\n    const oldParent = this.#resolvePath(oldPathParts.join('/')) as DirectoryNode\n    if (\n      !Object.prototype.hasOwnProperty.call(oldParent.children, oldFilename)\n    ) {\n      throw new FsError('ENOENT', 'No such file or directory')\n    }\n    const newPathParts = this.#pathParts(newPath)\n    const newFilename = newPathParts.pop()!\n    const newParent = this.#resolvePath(newPathParts.join('/')) as DirectoryNode\n    if (\n      doFileOps &&\n      Object.prototype.hasOwnProperty.call(newParent.children, newFilename)\n    ) {\n      // Overwrite, so return the underlying file to the pool\n      const node = newParent.children[newFilename]! as FileNode\n      const sh = this.#sh.get(node.backingFilename)!\n      sh.truncate(0)\n      this.state.pool.push(node.backingFilename)\n    }\n    newParent.children[newFilename] = oldParent.children[oldFilename]!\n    delete oldParent.children[oldFilename]\n  }\n\n  rmdir(path: string): void {\n    this.#tryWithWAL({ opp: 'rmdir', args: [path] }, () => {\n      this._rmdirState(path)\n    })\n  }\n\n  _rmdirState(path: string): void {\n    const pathParts = this.#pathParts(path)\n    const dirName = pathParts.pop()!\n    const parent = this.#resolvePath(pathParts.join('/')) as DirectoryNode\n    if (!Object.prototype.hasOwnProperty.call(parent.children, dirName)) {\n      throw new FsError('ENOENT', 'No such file or directory')\n    }\n    const node = parent.children[dirName]!\n    if (node.type !== 'directory') {\n      throw new FsError('ENOTDIR', 'Not a directory')\n    }\n    if (Object.keys(node.children).length > 0) {\n      throw new FsError('ENOTEMPTY', 'Directory not empty')\n    }\n    delete parent.children[dirName]\n  }\n\n  truncate(path: string, len = 0): void {\n    const node = this.#resolvePath(path)\n    if (node.type !== 'file') {\n      throw new FsError('EISDIR', 'Is a directory')\n    }\n    const sh = this.#sh.get(node.backingFilename)\n    if (!sh) {\n      throw new FsError('ENOENT', 'No such file or directory')\n    }\n    sh.truncate(len)\n    this.#unsyncedSH.add(sh)\n  }\n\n  unlink(path: string): void {\n    this.#tryWithWAL({ opp: 'unlink', args: [path] }, () => {\n      this._unlinkState(path, true)\n    })\n  }\n\n  _unlinkState(path: string, doFileOps = false): void {\n    const pathParts = this.#pathParts(path)\n    const filename = pathParts.pop()!\n    const dir = this.#resolvePath(pathParts.join('/')) as DirectoryNode\n    if (!Object.prototype.hasOwnProperty.call(dir.children, filename)) {\n      throw new FsError('ENOENT', 'No such file or directory')\n    }\n    const node = dir.children[filename]!\n    if (node.type !== 'file') {\n      throw new FsError('EISDIR', 'Is a directory')\n    }\n    delete dir.children[filename]\n    if (doFileOps) {\n      const sh = this.#sh.get(node.backingFilename)!\n      // We don't delete the file, it's truncated and returned to the pool\n      sh?.truncate(0)\n      this.#unsyncedSH.add(sh)\n      if (this.#openHandleIds.has(path)) {\n        this.#openHandlePaths.delete(this.#openHandleIds.get(path)!)\n        this.#openHandleIds.delete(path)\n      }\n    }\n    this.state.pool.push(node.backingFilename)\n  }\n\n  utimes(path: string, atime: number, mtime: number): void {\n    this.#tryWithWAL({ opp: 'utimes', args: [path, atime, mtime] }, () => {\n      this._utimesState(path, atime, mtime)\n    })\n  }\n\n  _utimesState(path: string, _atime: number, mtime: number): void {\n    const node = this.#resolvePath(path)\n    node.lastModified = mtime\n  }\n\n  writeFile(\n    path: string,\n    data: string | Int8Array,\n    options?: { encoding?: string; mode?: number; flag?: string },\n  ): void {\n    const pathParts = this.#pathParts(path)\n    const filename = pathParts.pop()!\n    const parent = this.#resolvePath(pathParts.join('/')) as DirectoryNode\n\n    if (!Object.prototype.hasOwnProperty.call(parent.children, filename)) {\n      if (this.state.pool.length === 0) {\n        throw new Error('No more file handles available in the pool')\n      }\n      const node: Node = {\n        type: 'file',\n        lastModified: Date.now(),\n        mode: options?.mode || INITIAL_MODE.FILE,\n        backingFilename: this.state.pool.pop()!,\n      }\n      parent.children[filename] = node\n      this.#logWAL({\n        opp: 'createFileNode',\n        args: [path, node],\n      })\n    } else {\n      const node = parent.children[filename] as FileNode\n      node.lastModified = Date.now()\n      this.#logWAL({\n        opp: 'setLastModified',\n        args: [path, node.lastModified],\n      })\n    }\n    const node = parent.children[filename] as FileNode\n    const sh = this.#sh.get(node.backingFilename)!\n    // Files in pool are empty, only write if data is provided\n    if (data.length > 0) {\n      sh.write(\n        typeof data === 'string'\n          ? new TextEncoder().encode(data)\n          : new Int8Array(data),\n        { at: 0 },\n      )\n      if (path.startsWith('/pg_wal')) {\n        this.#unsyncedSH.add(sh)\n      }\n    }\n  }\n\n  _createFileNodeState(path: string, node: FileNode): FileNode {\n    const pathParts = this.#pathParts(path)\n    const filename = pathParts.pop()!\n    const parent = this.#resolvePath(pathParts.join('/')) as DirectoryNode\n    parent.children[filename] = node\n    // remove backingFilename from pool\n    const index = this.state.pool.indexOf(node.backingFilename)\n    if (index > -1) {\n      this.state.pool.splice(index, 1)\n    }\n    return node\n  }\n\n  _setLastModifiedState(path: string, lastModified: number): void {\n    const node = this.#resolvePath(path)\n    node.lastModified = lastModified\n  }\n\n  write(\n    fd: number,\n    buffer: Int8Array, // Buffer to read from\n    offset: number, // Offset in buffer to start reading from\n    length: number, // Number of bytes to write\n    position: number, // Position in file to write to\n  ): number {\n    const path = this.#getPathFromFd(fd)\n    const node = this.#resolvePath(path)\n    if (node.type !== 'file') {\n      throw new FsError('EISDIR', 'Is a directory')\n    }\n    const sh = this.#sh.get(node.backingFilename)\n    if (!sh) {\n      throw new FsError('EBADF', 'Bad file descriptor')\n    }\n    const ret = sh.write(new Int8Array(buffer, offset, length), {\n      at: position,\n    })\n    if (path.startsWith('/pg_wal')) {\n      this.#unsyncedSH.add(sh)\n    }\n    return ret\n  }\n\n  // Internal methods:\n\n  #tryWithWAL(entry: WALEntry, fn: () => void) {\n    const offset = this.#logWAL(entry)\n    try {\n      fn()\n    } catch (e) {\n      // Rollback WAL entry\n      this.#stateSH.truncate(offset)\n      throw e\n    }\n  }\n\n  #logWAL(entry: WALEntry) {\n    const entryJSON = JSON.stringify(entry)\n    const stateAB = new TextEncoder().encode(`\\n${entryJSON}`)\n    const offset = this.#stateSH.getSize()\n    this.#stateSH.write(stateAB, { at: offset })\n    this.#unsyncedSH.add(this.#stateSH)\n    return offset\n  }\n\n  #pathParts(path: string): string[] {\n    return path.split('/').filter(Boolean)\n  }\n\n  #resolvePath(path: string, from?: DirectoryNode): Node {\n    const parts = this.#pathParts(path)\n    let node: Node = from || this.state.root\n    for (const part of parts) {\n      if (node.type !== 'directory') {\n        throw new FsError('ENOTDIR', 'Not a directory')\n      }\n      if (!Object.prototype.hasOwnProperty.call(node.children, part)) {\n        throw new FsError('ENOENT', 'No such file or directory')\n      }\n      node = node.children[part]!\n    }\n    return node\n  }\n\n  #getPathFromFd(fd: number): string {\n    const path = this.#openHandlePaths.get(fd)\n    if (!path) {\n      throw new FsError('EBADF', 'Bad file descriptor')\n    }\n    return path\n  }\n\n  #nextHandleId(): number {\n    const id = ++this.#handleIdCounter\n    while (this.#openHandlePaths.has(id)) {\n      this.#handleIdCounter++\n    }\n    return id\n  }\n\n  async #resolveOpfsDirectory(\n    path: string,\n    options?: {\n      from?: FileSystemDirectoryHandle\n      create?: boolean\n    },\n  ): Promise<FileSystemDirectoryHandle> {\n    const parts = this.#pathParts(path)\n    let ah = options?.from || this.#opfsRootAh\n    for (const part of parts) {\n      ah = await ah.getDirectoryHandle(part, { create: options?.create })\n    }\n    return ah\n  }\n}\n","import { FilesystemBase } from '../types.js'\nimport { PGDATA } from '../index.js'\nimport type { PostgresMod, FS } from '../../postgresMod.js'\nimport { createOPFSAHP } from './emscriptenFs.js'\nimport { OpfsAhp } from './opfsAhp.js'\nimport { dumpTar, type DumpTarCompressionOptions } from '../tarUtils.js'\n\nexport interface OpfsAhpFSOptions {\n  initialPoolSize?: number\n  maintainedPoolSize?: number\n}\n\n/**\n * PGlite OPFS access handle pool filesystem.\n * Opens a pool of sync access handles and then allocates them as needed.\n */\nexport class OpfsAhpFS extends FilesystemBase {\n  #initialPoolSize: number\n  #maintainedPoolSize: number\n  opfsAhp?: OpfsAhp\n\n  constructor(\n    dataDir: string,\n    { initialPoolSize, maintainedPoolSize }: OpfsAhpFSOptions = {},\n  ) {\n    super(dataDir)\n    this.#initialPoolSize = initialPoolSize ?? 1000\n    this.#maintainedPoolSize = maintainedPoolSize ?? 100\n  }\n\n  async emscriptenOpts(opts: Partial<PostgresMod>) {\n    this.opfsAhp = await OpfsAhp.create({\n      root: this.dataDir!,\n      initialPoolSize: this.#initialPoolSize,\n      maintainedPoolSize: this.#maintainedPoolSize,\n    })\n    const options: Partial<PostgresMod> = {\n      ...opts,\n      preRun: [\n        ...(opts.preRun || []),\n        (mod: PostgresMod) => {\n          const OPFS = createOPFSAHP(mod, this.opfsAhp!)\n          mod.FS.mkdir(PGDATA)\n          mod.FS.mount(OPFS, {}, PGDATA)\n        },\n      ],\n    }\n    return options\n  }\n\n  async syncToFs(_fs: FS, relaxedDurability = false) {\n    await this.opfsAhp?.maybeCheckpointState()\n    await this.opfsAhp?.maintainPool()\n    // console.log(\"syncToFs\", relaxedDurability);\n    if (!relaxedDurability) {\n      this.opfsAhp?.flush()\n    }\n  }\n\n  async dumpTar(\n    mod: FS,\n    dbname: string,\n    compression?: DumpTarCompressionOptions,\n  ) {\n    return dumpTar(mod, dbname, compression)\n  }\n\n  async close(FS: FS): Promise<void> {\n    this.opfsAhp?.exit()\n    FS.quit()\n  }\n}\n","import type { FsType, Filesystem } from './types.js'\nimport { IdbFs } from './idbfs.js'\nimport { MemoryFS } from './memoryfs.js'\n\nexport type * from './types.js'\n\nexport const WASM_PREFIX = '/tmp/pglite'\nexport const PGDATA = WASM_PREFIX + '/' + 'base'\n\nexport function parseDataDir(dataDir?: string) {\n  let fsType: FsType\n  if (dataDir?.startsWith('file://')) {\n    // Remove the file:// prefix, and use node filesystem\n    dataDir = dataDir.slice(7)\n    if (!dataDir) {\n      throw new Error('Invalid dataDir, must be a valid path')\n    }\n    fsType = 'nodefs'\n  } else if (dataDir?.startsWith('idb://')) {\n    // Remove the idb:// prefix, and use indexeddb filesystem\n    dataDir = dataDir.slice(6)\n    fsType = 'idbfs'\n  } else if (dataDir?.startsWith('opfs-ahp://')) {\n    // Remove the opfsahp:// prefix, and use opfs access handle pool filesystem\n    dataDir = dataDir.slice(11)\n    fsType = 'opfs-ahp'\n  } else if (!dataDir || dataDir?.startsWith('memory://')) {\n    // Use in-memory filesystem\n    fsType = 'memoryfs'\n  } else {\n    // No prefix, use node filesystem\n    fsType = 'nodefs'\n  }\n  return { dataDir, fsType }\n}\n\nexport async function loadFs(dataDir?: string, fsType?: FsType) {\n  let fs: Filesystem\n  if (dataDir && fsType === 'nodefs') {\n    // Lazy load the nodefs to avoid bundling it in the browser\n    const { NodeFS } = await import('./nodefs.js')\n    fs = new NodeFS(dataDir)\n  } else if (dataDir && fsType === 'idbfs') {\n    fs = new IdbFs(dataDir)\n  } else if (dataDir && fsType === 'opfs-ahp') {\n    // Lazy load the opfs-ahp to so that it's optional in the bundle\n    const { OpfsAhpFS } = await import('./opfs-ahp/index.js')\n    fs = new OpfsAhpFS(dataDir)\n  } else {\n    fs = new MemoryFS()\n  }\n  return fs\n}\n","export * from './pglite.js'\nexport * from './interface.js'\nexport * as types from './types.js'\nexport * as parse from './parse.js'\nexport * as messages from '@electric-sql/pg-protocol/messages'\nexport * as protocol from '@electric-sql/pg-protocol'\nexport { MemoryFS } from './fs/memoryfs.js'\nexport { IdbFs } from './fs/idbfs.js'\nexport { Mutex } from 'async-mutex'\nexport { uuid, formatQuery } from './utils.js'\n","import { Mutex } from 'async-mutex'\nimport PostgresModFactory, { type PostgresMod } from './postgresMod.js'\nimport { type Filesystem, parseDataDir, loadFs } from './fs/index.js'\nimport { instantiateWasm, getFsBundle, startWasmDownload } from './utils.js'\nimport type {\n  DebugLevel,\n  PGliteOptions,\n  PGliteInterface,\n  ExecProtocolOptions,\n  PGliteInterfaceExtensions,\n  Extensions,\n} from './interface.js'\nimport { BasePGlite } from './base.js'\nimport { loadExtensionBundle, loadExtensions } from './extensionUtils.js'\nimport { loadTar, DumpTarCompressionOptions } from './fs/tarUtils.js'\nimport { PGDATA, WASM_PREFIX } from './fs/index.js'\n\n// Importing the source as the built version is not ESM compatible\nimport { serialize, Parser as ProtocolParser } from '@electric-sql/pg-protocol'\nimport {\n  BackendMessage,\n  DatabaseError,\n  NoticeMessage,\n  CommandCompleteMessage,\n  NotificationResponseMessage,\n} from '@electric-sql/pg-protocol/messages'\n\nexport class PGlite\n  extends BasePGlite\n  implements PGliteInterface, AsyncDisposable\n{\n  fs?: Filesystem\n  protected mod?: PostgresMod\n\n  readonly dataDir?: string\n\n  #ready = false\n  #closing = false\n  #closed = false\n  #inTransaction = false\n  #relaxedDurability = false\n\n  readonly waitReady: Promise<void>\n\n  #queryMutex = new Mutex()\n  #transactionMutex = new Mutex()\n  #fsSyncMutex = new Mutex()\n  #fsSyncScheduled = false\n\n  readonly debug: DebugLevel = 0\n\n  #extensions: Extensions\n  #extensionsClose: Array<() => Promise<void>> = []\n\n  #protocolParser = new ProtocolParser()\n\n  // These are the current ArrayBuffer that is being read or written to\n  // during a query, such as COPY FROM or COPY TO.\n  #queryReadBuffer?: ArrayBuffer\n  #queryWriteChunks?: Uint8Array[]\n\n  #notifyListeners = new Map<string, Set<(payload: string) => void>>()\n  #globalNotifyListeners = new Set<(channel: string, payload: string) => void>()\n\n  /**\n   * Create a new PGlite instance\n   * @param dataDir The directory to store the database files\n   *                Prefix with idb:// to use indexeddb filesystem in the browser\n   *                Use memory:// to use in-memory filesystem\n   * @param options PGlite options\n   */\n  constructor(dataDir?: string, options?: PGliteOptions)\n\n  /**\n   * Create a new PGlite instance\n   * @param options PGlite options including the data directory\n   */\n  constructor(options?: PGliteOptions)\n\n  constructor(\n    dataDirOrPGliteOptions: string | PGliteOptions = {},\n    options: PGliteOptions = {},\n  ) {\n    super()\n    if (typeof dataDirOrPGliteOptions === 'string') {\n      options = {\n        dataDir: dataDirOrPGliteOptions,\n        ...options,\n      }\n    } else {\n      options = dataDirOrPGliteOptions\n    }\n    this.dataDir = options.dataDir\n\n    // Enable debug logging if requested\n    if (options?.debug !== undefined) {\n      this.debug = options.debug\n    }\n\n    // Enable relaxed durability if requested\n    if (options?.relaxedDurability !== undefined) {\n      this.#relaxedDurability = options.relaxedDurability\n    }\n\n    // Save the extensions for later use\n    this.#extensions = options.extensions ?? {}\n\n    // Initialize the database, and store the promise so we can wait for it to be ready\n    this.waitReady = this.#init(options ?? {})\n  }\n\n  /**\n   * Create a new PGlite instance with extensions on the Typescript interface\n   * (The main constructor does enable extensions, however due to the limitations\n   * of Typescript, the extensions are not available on the instance interface)\n   * @param options PGlite options including the data directory\n   * @returns A promise that resolves to the PGlite instance when it's ready.\n   */\n\n  static async create<O extends PGliteOptions>(\n    options?: O,\n  ): Promise<PGlite & PGliteInterfaceExtensions<O['extensions']>>\n\n  /**\n   * Create a new PGlite instance with extensions on the Typescript interface\n   * (The main constructor does enable extensions, however due to the limitations\n   * of Typescript, the extensions are not available on the instance interface)\n   * @param dataDir The directory to store the database files\n   *                Prefix with idb:// to use indexeddb filesystem in the browser\n   *                Use memory:// to use in-memory filesystem\n   * @param options PGlite options\n   * @returns A promise that resolves to the PGlite instance when it's ready.\n   */\n  static async create<O extends PGliteOptions>(\n    dataDir?: string,\n    options?: O,\n  ): Promise<PGlite & PGliteInterfaceExtensions<O['extensions']>>\n\n  static async create<O extends PGliteOptions>(\n    dataDirOrPGliteOptions?: string | O,\n    options?: O,\n  ): Promise<PGlite & PGliteInterfaceExtensions<O['extensions']>> {\n    const resolvedOpts: PGliteOptions =\n      typeof dataDirOrPGliteOptions === 'string'\n        ? {\n            dataDir: dataDirOrPGliteOptions,\n            ...(options ?? {}),\n          }\n        : dataDirOrPGliteOptions ?? {}\n\n    const pg = new PGlite(resolvedOpts)\n    await pg.waitReady\n    return pg as any\n  }\n\n  /**\n   * Initialize the database\n   * @returns A promise that resolves when the database is ready\n   */\n  async #init(options: PGliteOptions) {\n    if (options.fs) {\n      this.fs = options.fs\n    } else {\n      const { dataDir, fsType } = parseDataDir(options.dataDir)\n      this.fs = await loadFs(dataDir, fsType)\n    }\n\n    const extensionBundlePromises: Record<string, Promise<Blob | null>> = {}\n    const extensionInitFns: Array<() => Promise<void>> = []\n\n    const args = [\n      `PGDATA=${PGDATA}`,\n      `PREFIX=${WASM_PREFIX}`,\n      `PGUSER=${options.username ?? 'postgres'}`,\n      `PGDATABASE=${options.database ?? 'template1'}`,\n      'MODE=REACT',\n      'REPL=N',\n      // \"-F\", // Disable fsync (TODO: Only for in-memory mode?)\n      ...(this.debug ? ['-d', this.debug.toString()] : []),\n    ]\n\n    if (!options.wasmModule) {\n      // Start the wasm download in the background so it's ready when we need it\n      startWasmDownload()\n    }\n\n    // Get the fs bundle\n    // We don't await the loading of the fs bundle at this point as we can continue\n    // with other work.\n    // It's resolved value `fsBundleBuffer` is set and used in `getPreloadedPackage`\n    // which is called via `PostgresModFactory` after we have awaited\n    // `fsBundleBufferPromise` below.\n    const fsBundleBufferPromise = options.fsBundle\n      ? options.fsBundle.arrayBuffer()\n      : getFsBundle()\n    let fsBundleBuffer: ArrayBuffer\n    fsBundleBufferPromise.then((buffer) => {\n      fsBundleBuffer = buffer\n    })\n\n    let emscriptenOpts: Partial<PostgresMod> = {\n      WASM_PREFIX,\n      arguments: args,\n      INITIAL_MEMORY: options.initialMemory,\n      noExitRuntime: true,\n      ...(this.debug > 0\n        ? { print: console.info, printErr: console.error }\n        : { print: () => {}, printErr: () => {} }),\n      instantiateWasm: (imports, successCallback) => {\n        instantiateWasm(imports, options.wasmModule).then(\n          ({ instance, module }) => {\n            // @ts-ignore wrong type in Emscripten typings\n            successCallback(instance, module)\n          },\n        )\n        return {}\n      },\n      getPreloadedPackage: (remotePackageName, remotePackageSize) => {\n        if (remotePackageName === 'postgres.data') {\n          if (fsBundleBuffer.byteLength !== remotePackageSize) {\n            throw new Error(\n              `Invalid FS bundle size: ${fsBundleBuffer.byteLength} !== ${remotePackageSize}`,\n            )\n          }\n          return fsBundleBuffer\n        }\n        throw new Error(`Unknown package: ${remotePackageName}`)\n      },\n      preRun: [\n        (mod: any) => {\n          // Register /dev/blob device\n          // This is used to read and write blobs when used in COPY TO/FROM\n          // e.g. COPY mytable TO '/dev/blob' WITH (FORMAT binary)\n          // The data is returned by the query as a `blob` property in the results\n          const devId = mod.FS.makedev(64, 0)\n          const devOpt = {\n            open: (_stream: any) => {},\n            close: (_stream: any) => {},\n            read: (\n              _stream: any,\n              buffer: Uint8Array,\n              offset: number,\n              length: number,\n              position: number,\n            ) => {\n              const buf = this.#queryReadBuffer\n              if (!buf) {\n                throw new Error(\n                  'No /dev/blob File or Blob provided to read from',\n                )\n              }\n              const contents = new Uint8Array(buf)\n              if (position >= contents.length) return 0\n              const size = Math.min(contents.length - position, length)\n              for (let i = 0; i < size; i++) {\n                buffer[offset + i] = contents[position + i]\n              }\n              return size\n            },\n            write: (\n              _stream: any,\n              buffer: Uint8Array,\n              offset: number,\n              length: number,\n              _position: number,\n            ) => {\n              this.#queryWriteChunks ??= []\n              this.#queryWriteChunks.push(buffer.slice(offset, offset + length))\n              return length\n            },\n            llseek: (stream: any, offset: number, whence: number) => {\n              const buf = this.#queryReadBuffer\n              if (!buf) {\n                throw new Error('No /dev/blob File or Blob provided to llseek')\n              }\n              let position = offset\n              if (whence === 1) {\n                position += stream.position\n              } else if (whence === 2) {\n                position = new Uint8Array(buf).length\n              }\n              if (position < 0) {\n                throw new mod.FS.ErrnoError(28)\n              }\n              return position\n            },\n          }\n          mod.FS.registerDevice(devId, devOpt)\n          mod.FS.mkdev('/dev/blob', devId)\n        },\n      ],\n    }\n\n    emscriptenOpts = await this.fs!.emscriptenOpts(emscriptenOpts)\n\n    // # Setup extensions\n    // This is the first step of loading PGlite extensions\n    // We loop through each extension and call the setup function\n    // This amends the emscriptenOpts and can return:\n    // - emscriptenOpts: The updated emscripten options\n    // - namespaceObj: The namespace object to attach to the PGlite instance\n    // - init: A function to initialize the extension/plugin after the database is ready\n    // - close: A function to close/tidy-up the extension/plugin when the database is closed\n    for (const [extName, ext] of Object.entries(this.#extensions)) {\n      if (ext instanceof URL) {\n        // Extension with only a URL to a bundle\n        extensionBundlePromises[extName] = loadExtensionBundle(ext)\n      } else {\n        // Extension with JS setup function\n        const extRet = await ext.setup(this, emscriptenOpts)\n        if (extRet.emscriptenOpts) {\n          emscriptenOpts = extRet.emscriptenOpts\n        }\n        if (extRet.namespaceObj) {\n          const instance = this as any\n          instance[extName] = extRet.namespaceObj\n        }\n        if (extRet.bundlePath) {\n          extensionBundlePromises[extName] = loadExtensionBundle(\n            extRet.bundlePath,\n          ) // Don't await here, this is parallel\n        }\n        if (extRet.init) {\n          extensionInitFns.push(extRet.init)\n        }\n        if (extRet.close) {\n          this.#extensionsClose.push(extRet.close)\n        }\n      }\n    }\n    emscriptenOpts['pg_extensions'] = extensionBundlePromises\n\n    // Await the fs bundle - we do this just before calling PostgresModFactory\n    // as it needs the fs bundle to be ready.\n    await fsBundleBufferPromise\n\n    // Load the database engine\n    this.mod = await PostgresModFactory(emscriptenOpts)\n\n    // Sync the filesystem from any previous store\n    await this.fs!.initialSyncFs(this.mod.FS)\n\n    // If the user has provided a tarball to load the database from, do that now.\n    // We do this after the initial sync so that we can throw if the database\n    // already exists.\n    if (options.loadDataDir) {\n      if (this.mod.FS.analyzePath(PGDATA + '/PG_VERSION').exists) {\n        throw new Error('Database already exists, cannot load from tarball')\n      }\n      this.#log('pglite: loading data from tarball')\n      await loadTar(this.mod.FS, options.loadDataDir)\n    }\n\n    // Check and log if the database exists\n    if (this.mod.FS.analyzePath(PGDATA + '/PG_VERSION').exists) {\n      this.#log('pglite: found DB, resuming')\n    } else {\n      this.#log('pglite: no db')\n    }\n\n    // Start compiling dynamic extensions present in FS.\n    await loadExtensions(this.mod, (...args) => this.#log(...args))\n\n    // Initialize the database\n    const idb = this.mod._pg_initdb()\n\n    if (!idb) {\n      // This would be a sab worker crash before pg_initdb can be called\n      throw new Error('INITDB failed to return value')\n    }\n\n    // initdb states:\n    // - populating pgdata\n    // - reconnect a previous db\n    // - found valid db+user\n    // currently unhandled:\n    // - db does not exist\n    // - user is invalid for db\n\n    if (idb & 0b0001) {\n      // this would be a wasm crash inside pg_initdb from a sab worker.\n      throw new Error('INITDB failed')\n    } else if (idb & 0b0010) {\n      // initdb was called to init PGDATA if required\n      const pguser = options.username ?? 'postgres'\n      const pgdatabase = options.database ?? 'template1'\n      if (idb & 0b0100) {\n        // initdb has found a previous database\n        if (idb & (0b0100 | 0b1000)) {\n          // initdb found db+user, and we switched to that user\n        } else {\n          // TODO: invalid user for db?\n          throw new Error('Invalid db/user combination')\n        }\n      } else {\n        // initdb has created a new database for us, we can only continue if we are\n        // in template1 and the user is postgres\n        if (pgdatabase !== 'template1' && pguser !== 'postgres') {\n          // throw new Error(`Invalid database ${pgdatabase} requested`);\n          throw new Error(\n            'INITDB created a new datadir, but an alternative db/user was requested',\n          )\n        }\n      }\n    }\n\n    // Sync any changes back to the persisted store (if there is one)\n    // TODO: only sync here if initdb did init db.\n    await this.syncToFs()\n\n    this.#ready = true\n\n    // Set the search path to public for this connection\n    await this.exec('SET search_path TO public;')\n\n    // Init array types\n    await this._initArrayTypes()\n\n    // Init extensions\n    for (const initFn of extensionInitFns) {\n      await initFn()\n    }\n  }\n\n  /**\n   * The Postgres Emscripten Module\n   */\n  get Module() {\n    return this.mod!\n  }\n\n  /**\n   * The ready state of the database\n   */\n  get ready() {\n    return this.#ready && !this.#closing && !this.#closed\n  }\n\n  /**\n   * The closed state of the database\n   */\n  get closed() {\n    return this.#closed\n  }\n\n  /**\n   * Close the database\n   * @returns A promise that resolves when the database is closed\n   */\n  async close() {\n    await this._checkReady()\n    this.#closing = true\n\n    // Close all extensions\n    for (const closeFn of this.#extensionsClose) {\n      await closeFn()\n    }\n\n    // Close the database\n    try {\n      await this.execProtocol(serialize.end())\n      this.mod!._pg_shutdown()\n    } catch (e) {\n      const err = e as { name: string; status: number }\n      if (err.name === 'ExitStatus' && err.status === 0) {\n        // Database closed successfully\n        // An earlier build of PGlite would throw an error here when closing\n        // leaving this here for now. I believe it was a bug in Emscripten.\n      } else {\n        throw e\n      }\n    }\n\n    // Close the filesystem\n    await this.fs!.close(this.mod!.FS)\n\n    this.#closed = true\n    this.#closing = false\n  }\n\n  /**\n   * Close the database when the object exits scope\n   * Stage 3 ECMAScript Explicit Resource Management\n   * https://www.typescriptlang.org/docs/handbook/release-notes/typescript-5-2.html#using-declarations-and-explicit-resource-management\n   */\n  async [Symbol.asyncDispose]() {\n    await this.close()\n  }\n\n  /**\n   * Handle a file attached to the current query\n   * @param file The file to handle\n   */\n  async _handleBlob(blob?: File | Blob) {\n    this.#queryReadBuffer = blob ? await blob.arrayBuffer() : undefined\n  }\n\n  /**\n   * Cleanup the current file\n   */\n  async _cleanupBlob() {\n    this.#queryReadBuffer = undefined\n  }\n\n  /**\n   * Get the written blob from the current query\n   * @returns The written blob\n   */\n  async _getWrittenBlob(): Promise<Blob | undefined> {\n    if (!this.#queryWriteChunks) {\n      return undefined\n    }\n    const blob = new Blob(this.#queryWriteChunks)\n    this.#queryWriteChunks = undefined\n    return blob\n  }\n\n  /**\n   * Wait for the database to be ready\n   */\n  async _checkReady() {\n    if (this.#closing) {\n      throw new Error('PGlite is closing')\n    }\n    if (this.#closed) {\n      throw new Error('PGlite is closed')\n    }\n    if (!this.#ready) {\n      // Starting the database can take a while and it might not be ready yet\n      // We'll wait for it to be ready before continuing\n      await this.waitReady\n    }\n  }\n\n  /**\n   * Execute a postgres wire protocol message directly without wrapping the response.\n   * Only use if `execProtocol()` doesn't suite your needs.\n   *\n   * **Warning:** This bypasses PGlite's protocol wrappers that manage error/notice messages,\n   * transactions, and notification listeners. Only use if you need to bypass these wrappers and\n   * don't intend to use the above features.\n   *\n   * @param message The postgres wire protocol message to execute\n   * @returns The direct message data response produced by Postgres\n   */\n  async execProtocolRaw(\n    message: Uint8Array,\n    { syncToFs = true }: ExecProtocolOptions = {},\n  ) {\n    const msg_len = message.length\n    const mod = this.mod!\n\n    // >0 set buffer content type to wire protocol\n    // set buffer size so answer will be at size+0x2 pointer addr\n    mod._interactive_write(msg_len)\n\n    // copy whole buffer at addr 0x1\n    mod.HEAPU8.set(message, 1)\n\n    // execute the message\n    mod._interactive_one()\n\n    // Read responses from the buffer\n    const msg_start = msg_len + 2\n    const msg_end = msg_start + mod._interactive_read()\n    const data = mod.HEAPU8.subarray(msg_start, msg_end)\n\n    if (syncToFs) {\n      await this.syncToFs()\n    }\n\n    return data\n  }\n\n  /**\n   * Execute a postgres wire protocol message\n   * @param message The postgres wire protocol message to execute\n   * @returns The result of the query\n   */\n  async execProtocol(\n    message: Uint8Array,\n    {\n      syncToFs = true,\n      throwOnError = true,\n      onNotice,\n    }: ExecProtocolOptions = {},\n  ): Promise<Array<[BackendMessage, Uint8Array]>> {\n    const data = await this.execProtocolRaw(message, { syncToFs })\n    const results: Array<[BackendMessage, Uint8Array]> = []\n\n    this.#protocolParser.parse(data, (msg) => {\n      if (msg instanceof DatabaseError) {\n        this.#protocolParser = new ProtocolParser() // Reset the parser\n        if (throwOnError) {\n          throw msg\n        }\n        // TODO: Do we want to wrap the error in a custom error?\n      } else if (msg instanceof NoticeMessage) {\n        if (this.debug > 0) {\n          // Notice messages are warnings, we should log them\n          console.warn(msg)\n        }\n        if (onNotice) {\n          onNotice(msg)\n        }\n      } else if (msg instanceof CommandCompleteMessage) {\n        // Keep track of the transaction state\n        switch (msg.text) {\n          case 'BEGIN':\n            this.#inTransaction = true\n            break\n          case 'COMMIT':\n          case 'ROLLBACK':\n            this.#inTransaction = false\n            break\n        }\n      } else if (msg instanceof NotificationResponseMessage) {\n        // We've received a notification, call the listeners\n        const listeners = this.#notifyListeners.get(msg.channel)\n        if (listeners) {\n          listeners.forEach((cb) => {\n            // We use queueMicrotask so that the callback is called after any\n            // synchronous code has finished running.\n            queueMicrotask(() => cb(msg.payload))\n          })\n        }\n        this.#globalNotifyListeners.forEach((cb) => {\n          queueMicrotask(() => cb(msg.channel, msg.payload))\n        })\n      }\n      results.push([msg, data])\n    })\n\n    return results\n  }\n\n  /**\n   * Check if the database is in a transaction\n   * @returns True if the database is in a transaction, false otherwise\n   */\n  isInTransaction() {\n    return this.#inTransaction\n  }\n\n  /**\n   * Perform any sync operations implemented by the filesystem, this is\n   * run after every query to ensure that the filesystem is synced.\n   */\n  async syncToFs() {\n    if (this.#fsSyncScheduled) {\n      return\n    }\n    this.#fsSyncScheduled = true\n\n    const doSync = async () => {\n      await this.#fsSyncMutex.runExclusive(async () => {\n        this.#fsSyncScheduled = false\n        await this.fs!.syncToFs(this.mod!.FS, this.#relaxedDurability)\n      })\n    }\n\n    if (this.#relaxedDurability) {\n      doSync()\n    } else {\n      await doSync()\n    }\n  }\n\n  /**\n   * Internal log function\n   */\n  #log(...args: any[]) {\n    if (this.debug > 0) {\n      console.log(...args)\n    }\n  }\n\n  /**\n   * Listen for a notification\n   * @param channel The channel to listen on\n   * @param callback The callback to call when a notification is received\n   */\n  async listen(channel: string, callback: (payload: string) => void) {\n    if (!this.#notifyListeners.has(channel)) {\n      this.#notifyListeners.set(channel, new Set())\n    }\n    this.#notifyListeners.get(channel)!.add(callback)\n    await this.exec(`LISTEN \"${channel}\"`)\n    return async () => {\n      await this.unlisten(channel, callback)\n    }\n  }\n\n  /**\n   * Stop listening for a notification\n   * @param channel The channel to stop listening on\n   * @param callback The callback to remove\n   */\n  async unlisten(channel: string, callback?: (payload: string) => void) {\n    if (callback) {\n      this.#notifyListeners.get(channel)?.delete(callback)\n      if (this.#notifyListeners.get(channel)?.size === 0) {\n        await this.exec(`UNLISTEN \"${channel}\"`)\n        this.#notifyListeners.delete(channel)\n      }\n    } else {\n      await this.exec(`UNLISTEN \"${channel}\"`)\n      this.#notifyListeners.delete(channel)\n    }\n  }\n\n  /**\n   * Listen to notifications\n   * @param callback The callback to call when a notification is received\n   */\n  onNotification(\n    callback: (channel: string, payload: string) => void,\n  ): () => void {\n    this.#globalNotifyListeners.add(callback)\n    return () => {\n      this.#globalNotifyListeners.delete(callback)\n    }\n  }\n\n  /**\n   * Stop listening to notifications\n   * @param callback The callback to remove\n   */\n  offNotification(callback: (channel: string, payload: string) => void) {\n    this.#globalNotifyListeners.delete(callback)\n  }\n\n  /**\n   * Dump the PGDATA dir from the filesystem to a gziped tarball.\n   * @param compression The compression options to use - 'gzip', 'auto', 'none'\n   * @returns The tarball as a File object where available, and fallback to a Blob\n   */\n  async dumpDataDir(\n    compression?: DumpTarCompressionOptions,\n  ): Promise<File | Blob> {\n    const dbname = this.dataDir?.split('/').pop() ?? 'pgdata'\n    return this.fs!.dumpTar(this.mod!.FS, dbname, compression)\n  }\n\n  /**\n   * Run a function in a mutex that's exclusive to queries\n   * @param fn The query to run\n   * @returns The result of the query\n   */\n  _runExclusiveQuery<T>(fn: () => Promise<T>): Promise<T> {\n    return this.#queryMutex.runExclusive(fn)\n  }\n\n  /**\n   * Run a function in a mutex that's exclusive to transactions\n   * @param fn The function to run\n   * @returns The result of the function\n   */\n  _runExclusiveTransaction<T>(fn: () => Promise<T>): Promise<T> {\n    return this.#transactionMutex.runExclusive(fn)\n  }\n}\n","const E_TIMEOUT = new Error('timeout while waiting for mutex to become available');\nconst E_ALREADY_LOCKED = new Error('mutex already locked');\nconst E_CANCELED = new Error('request for lock canceled');\n\nvar __awaiter$2 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nclass Semaphore {\n    constructor(_value, _cancelError = E_CANCELED) {\n        this._value = _value;\n        this._cancelError = _cancelError;\n        this._weightedQueues = [];\n        this._weightedWaiters = [];\n    }\n    acquire(weight = 1) {\n        if (weight <= 0)\n            throw new Error(`invalid weight ${weight}: must be positive`);\n        return new Promise((resolve, reject) => {\n            if (!this._weightedQueues[weight - 1])\n                this._weightedQueues[weight - 1] = [];\n            this._weightedQueues[weight - 1].push({ resolve, reject });\n            this._dispatch();\n        });\n    }\n    runExclusive(callback, weight = 1) {\n        return __awaiter$2(this, void 0, void 0, function* () {\n            const [value, release] = yield this.acquire(weight);\n            try {\n                return yield callback(value);\n            }\n            finally {\n                release();\n            }\n        });\n    }\n    waitForUnlock(weight = 1) {\n        if (weight <= 0)\n            throw new Error(`invalid weight ${weight}: must be positive`);\n        return new Promise((resolve) => {\n            if (!this._weightedWaiters[weight - 1])\n                this._weightedWaiters[weight - 1] = [];\n            this._weightedWaiters[weight - 1].push(resolve);\n            this._dispatch();\n        });\n    }\n    isLocked() {\n        return this._value <= 0;\n    }\n    getValue() {\n        return this._value;\n    }\n    setValue(value) {\n        this._value = value;\n        this._dispatch();\n    }\n    release(weight = 1) {\n        if (weight <= 0)\n            throw new Error(`invalid weight ${weight}: must be positive`);\n        this._value += weight;\n        this._dispatch();\n    }\n    cancel() {\n        this._weightedQueues.forEach((queue) => queue.forEach((entry) => entry.reject(this._cancelError)));\n        this._weightedQueues = [];\n    }\n    _dispatch() {\n        var _a;\n        for (let weight = this._value; weight > 0; weight--) {\n            const queueEntry = (_a = this._weightedQueues[weight - 1]) === null || _a === void 0 ? void 0 : _a.shift();\n            if (!queueEntry)\n                continue;\n            const previousValue = this._value;\n            const previousWeight = weight;\n            this._value -= weight;\n            weight = this._value + 1;\n            queueEntry.resolve([previousValue, this._newReleaser(previousWeight)]);\n        }\n        this._drainUnlockWaiters();\n    }\n    _newReleaser(weight) {\n        let called = false;\n        return () => {\n            if (called)\n                return;\n            called = true;\n            this.release(weight);\n        };\n    }\n    _drainUnlockWaiters() {\n        for (let weight = this._value; weight > 0; weight--) {\n            if (!this._weightedWaiters[weight - 1])\n                continue;\n            this._weightedWaiters[weight - 1].forEach((waiter) => waiter());\n            this._weightedWaiters[weight - 1] = [];\n        }\n    }\n}\n\nvar __awaiter$1 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nclass Mutex {\n    constructor(cancelError) {\n        this._semaphore = new Semaphore(1, cancelError);\n    }\n    acquire() {\n        return __awaiter$1(this, void 0, void 0, function* () {\n            const [, releaser] = yield this._semaphore.acquire();\n            return releaser;\n        });\n    }\n    runExclusive(callback) {\n        return this._semaphore.runExclusive(() => callback());\n    }\n    isLocked() {\n        return this._semaphore.isLocked();\n    }\n    waitForUnlock() {\n        return this._semaphore.waitForUnlock();\n    }\n    release() {\n        if (this._semaphore.isLocked())\n            this._semaphore.release();\n    }\n    cancel() {\n        return this._semaphore.cancel();\n    }\n}\n\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nfunction withTimeout(sync, timeout, timeoutError = E_TIMEOUT) {\n    return {\n        acquire: (weight) => {\n            if (weight !== undefined && weight <= 0) {\n                throw new Error(`invalid weight ${weight}: must be positive`);\n            }\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\n                let isTimeout = false;\n                const handle = setTimeout(() => {\n                    isTimeout = true;\n                    reject(timeoutError);\n                }, timeout);\n                try {\n                    const ticket = yield sync.acquire(weight);\n                    if (isTimeout) {\n                        const release = Array.isArray(ticket) ? ticket[1] : ticket;\n                        release();\n                    }\n                    else {\n                        clearTimeout(handle);\n                        resolve(ticket);\n                    }\n                }\n                catch (e) {\n                    if (!isTimeout) {\n                        clearTimeout(handle);\n                        reject(e);\n                    }\n                }\n            }));\n        },\n        runExclusive(callback, weight) {\n            return __awaiter(this, void 0, void 0, function* () {\n                let release = () => undefined;\n                try {\n                    const ticket = yield this.acquire(weight);\n                    if (Array.isArray(ticket)) {\n                        release = ticket[1];\n                        return yield callback(ticket[0]);\n                    }\n                    else {\n                        release = ticket;\n                        return yield callback();\n                    }\n                }\n                finally {\n                    release();\n                }\n            });\n        },\n        release(weight) {\n            sync.release(weight);\n        },\n        cancel() {\n            return sync.cancel();\n        },\n        waitForUnlock: (weight) => {\n            if (weight !== undefined && weight <= 0) {\n                throw new Error(`invalid weight ${weight}: must be positive`);\n            }\n            return new Promise((resolve, reject) => {\n                const handle = setTimeout(() => reject(timeoutError), timeout);\n                sync.waitForUnlock(weight).then(() => {\n                    clearTimeout(handle);\n                    resolve();\n                });\n            });\n        },\n        isLocked: () => sync.isLocked(),\n        getValue: () => sync.getValue(),\n        setValue: (value) => sync.setValue(value),\n    };\n}\n\n// eslint-disable-next-lisne @typescript-eslint/explicit-module-boundary-types\nfunction tryAcquire(sync, alreadyAcquiredError = E_ALREADY_LOCKED) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return withTimeout(sync, 0, alreadyAcquiredError);\n}\n\nexport { E_ALREADY_LOCKED, E_CANCELED, E_TIMEOUT, Mutex, Semaphore, tryAcquire, withTimeout };\n","import PostgresModFactory from '../release/postgres.js'\n\ntype IDBFS = Emscripten.FileSystemType & {\n  quit: () => void\n  dbs: Record<string, IDBDatabase>\n}\n\nexport type FS = typeof FS & {\n  filesystems: {\n    MEMFS: Emscripten.FileSystemType\n    NODEFS: Emscripten.FileSystemType\n    IDBFS: IDBFS\n  }\n  quit: () => void\n}\n\nexport interface PostgresMod\n  extends Omit<EmscriptenModule, 'preInit' | 'preRun' | 'postRun'> {\n  preInit: Array<{ (mod: PostgresMod): void }>\n  preRun: Array<{ (mod: PostgresMod): void }>\n  postRun: Array<{ (mod: PostgresMod): void }>\n  FS: FS\n  WASM_PREFIX: string\n  INITIAL_MEMORY: number\n  pg_extensions: Record<string, Promise<Blob | null>>\n  _pg_initdb: () => number\n  _pg_shutdown: () => void\n  _interactive_write: (msgLength: number) => void\n  _interactive_one: () => void\n  _interactive_read: () => number\n}\n\ntype PostgresFactory<T extends PostgresMod = PostgresMod> = (\n  moduleOverrides?: Partial<T>,\n) => Promise<T>\n\nexport default PostgresModFactory as PostgresFactory<PostgresMod>\n","import type { PGliteInterface, Transaction } from './interface.js'\nimport { serialize as serializeProtocol } from '@electric-sql/pg-protocol'\nimport { parseDescribeStatementResults } from './parse.js'\nimport { TEXT } from './types.js'\n\nexport const IN_NODE =\n  typeof process === 'object' &&\n  typeof process.versions === 'object' &&\n  typeof process.versions.node === 'string'\n\nlet wasmDownloadPromise: Promise<Response> | undefined\n\nexport async function startWasmDownload() {\n  if (IN_NODE || wasmDownloadPromise) {\n    return\n  }\n  const moduleUrl = new URL('../release/postgres.wasm', import.meta.url)\n  wasmDownloadPromise = fetch(moduleUrl)\n}\n\n// This is a global cache of the PGlite Wasm module to avoid having to re-download or\n// compile it on subsequent calls.\nlet cachedWasmModule: WebAssembly.Module | undefined\n\nexport async function instantiateWasm(\n  imports: WebAssembly.Imports,\n  module?: WebAssembly.Module,\n): Promise<{\n  instance: WebAssembly.Instance\n  module: WebAssembly.Module\n}> {\n  if (module || cachedWasmModule) {\n    WebAssembly.instantiate(module || cachedWasmModule!, imports)\n    return {\n      instance: await WebAssembly.instantiate(\n        module || cachedWasmModule!,\n        imports,\n      ),\n      module: module || cachedWasmModule!,\n    }\n  }\n  const moduleUrl = new URL('../release/postgres.wasm', import.meta.url)\n  if (IN_NODE) {\n    const fs = await import('fs/promises')\n    const buffer = await fs.readFile(moduleUrl)\n    const { module: newModule, instance } = await WebAssembly.instantiate(\n      buffer,\n      imports,\n    )\n    cachedWasmModule = newModule\n    return {\n      instance,\n      module: newModule,\n    }\n  } else {\n    if (!wasmDownloadPromise) {\n      wasmDownloadPromise = fetch(moduleUrl)\n    }\n    const response = await wasmDownloadPromise\n    const { module: newModule, instance } =\n      await WebAssembly.instantiateStreaming(response, imports)\n    cachedWasmModule = newModule\n    return {\n      instance,\n      module: newModule,\n    }\n  }\n}\n\nexport async function getFsBundle(): Promise<ArrayBuffer> {\n  const fsBundleUrl = new URL('../release/postgres.data', import.meta.url)\n  if (IN_NODE) {\n    const fs = await import('fs/promises')\n    const fileData = await fs.readFile(fsBundleUrl)\n    return fileData.buffer\n  } else {\n    const response = await fetch(fsBundleUrl)\n    return response.arrayBuffer()\n  }\n}\n\nexport const uuid = (): string => {\n  // best case, `crypto.randomUUID` is available\n  if (globalThis.crypto?.randomUUID) {\n    return globalThis.crypto.randomUUID()\n  }\n\n  const bytes = new Uint8Array(16)\n\n  if (globalThis.crypto?.getRandomValues) {\n    // `crypto.getRandomValues` is available even in non-secure contexts\n    globalThis.crypto.getRandomValues(bytes)\n  } else {\n    // fallback to Math.random, if the Crypto API is completely missing\n    for (let i = 0; i < bytes.length; i++) {\n      bytes[i] = Math.floor(Math.random() * 256)\n    }\n  }\n\n  bytes[6] = (bytes[6] & 0x0f) | 0x40 // Set the 4 most significant bits to 0100\n  bytes[8] = (bytes[8] & 0x3f) | 0x80 // Set the 2 most significant bits to 10\n\n  const hexValues: string[] = []\n  bytes.forEach((byte) => {\n    hexValues.push(byte.toString(16).padStart(2, '0'))\n  })\n\n  return (\n    hexValues.slice(0, 4).join('') +\n    '-' +\n    hexValues.slice(4, 6).join('') +\n    '-' +\n    hexValues.slice(6, 8).join('') +\n    '-' +\n    hexValues.slice(8, 10).join('') +\n    '-' +\n    hexValues.slice(10).join('')\n  )\n}\n\n/**\n * Formats a query with parameters\n * Expects that any tables/relations referenced in the query exist in the database\n * due to requiring them to be present to describe the parameters types.\n * `tx` is optional, and to be used when formatQuery is called during a transaction.\n * @param pg - The PGlite instance\n * @param query - The query to format\n * @param params - The parameters to format the query with\n * @param tx - The transaction to use, defaults to the PGlite instance\n * @returns The formatted query\n */\nexport async function formatQuery(\n  pg: PGliteInterface,\n  query: string,\n  params?: any[] | null,\n  tx?: Transaction | PGliteInterface,\n) {\n  if (!params || params.length === 0) {\n    // no params so no formatting needed\n    return query\n  }\n\n  tx = tx ?? pg\n\n  // Get the types of the parameters\n  let dataTypeIDs: number[]\n  try {\n    await pg.execProtocol(serializeProtocol.parse({ text: query }), {\n      syncToFs: false,\n    })\n\n    dataTypeIDs = parseDescribeStatementResults(\n      (\n        await pg.execProtocol(serializeProtocol.describe({ type: 'S' }), {\n          syncToFs: false,\n        })\n      ).map(([msg]) => msg),\n    )\n  } finally {\n    await pg.execProtocol(serializeProtocol.sync(), { syncToFs: false })\n  }\n\n  // replace $1, $2, etc with  %1L, %2L, etc\n  const subbedQuery = query.replace(/\\$([0-9]+)/g, (_, num) => {\n    return '%' + num + 'L'\n  })\n\n  const ret = await tx.query<{\n    query: string\n  }>(\n    `SELECT format($1, ${params.map((_, i) => `$${i + 2}`).join(', ')}) as query`,\n    [subbedQuery, ...params],\n    { paramTypes: [TEXT, ...dataTypeIDs] },\n  )\n  return ret.rows[0].query\n}\n","export { serialize } from './serializer'\nexport { Parser } from './parser'\nexport * as messages from './messages'\n","import { Writer } from './buffer-writer'\nimport { byteLengthUtf8 } from './string-utils'\n\nconst enum code {\n  startup = 0x70,\n  query = 0x51,\n  parse = 0x50,\n  bind = 0x42,\n  execute = 0x45,\n  flush = 0x48,\n  sync = 0x53,\n  end = 0x58,\n  close = 0x43,\n  describe = 0x44,\n  copyFromChunk = 0x64,\n  copyDone = 0x63,\n  copyFail = 0x66,\n}\n\ntype LegalValue = string | ArrayBuffer | ArrayBufferView | null\n\nconst writer = new Writer()\n\nconst startup = (opts: Record<string, string>): Uint8Array => {\n  // protocol version\n  writer.addInt16(3).addInt16(0)\n  for (const key of Object.keys(opts)) {\n    writer.addCString(key).addCString(opts[key])\n  }\n\n  writer.addCString('client_encoding').addCString('UTF8')\n\n  const bodyBuffer = writer.addCString('').flush()\n  // this message is sent without a code\n\n  const length = bodyBuffer.byteLength + 4\n\n  return new Writer().addInt32(length).add(bodyBuffer).flush()\n}\n\nconst requestSsl = (): Uint8Array => {\n  const bufferView = new DataView(new ArrayBuffer(8))\n  bufferView.setInt32(0, 8, false)\n  bufferView.setInt32(4, 80877103, false)\n  return new Uint8Array(bufferView.buffer)\n}\n\nconst password = (password: string): Uint8Array => {\n  return writer.addCString(password).flush(code.startup)\n}\n\nconst sendSASLInitialResponseMessage = (\n  mechanism: string,\n  initialResponse: string,\n): Uint8Array => {\n  // 0x70 = 'p'\n  writer\n    .addCString(mechanism)\n    .addInt32(byteLengthUtf8(initialResponse))\n    .addString(initialResponse)\n\n  return writer.flush(code.startup)\n}\n\nconst sendSCRAMClientFinalMessage = (additionalData: string): Uint8Array => {\n  return writer.addString(additionalData).flush(code.startup)\n}\n\nconst query = (text: string): Uint8Array => {\n  return writer.addCString(text).flush(code.query)\n}\n\ntype ParseOpts = {\n  name?: string\n  types?: number[]\n  text: string\n}\n\nconst emptyValueArray: LegalValue[] = []\n\nconst parse = (query: ParseOpts): Uint8Array => {\n  // expect something like this:\n  // { name: 'queryName',\n  //   text: 'select * from blah',\n  //   types: ['int8', 'bool'] }\n\n  // normalize missing query names to allow for null\n  const name = query.name ?? ''\n  if (name.length > 63) {\n    /* eslint-disable no-console */\n    console.error(\n      'Warning! Postgres only supports 63 characters for query names.',\n    )\n    console.error('You supplied %s (%s)', name, name.length)\n    console.error(\n      'This can cause conflicts and silent errors executing queries',\n    )\n    /* eslint-enable no-console */\n  }\n\n  const buffer = writer\n    .addCString(name) // name of query\n    .addCString(query.text) // actual query text\n    .addInt16(query.types?.length ?? 0)\n\n  query.types?.forEach((type) => buffer.addInt32(type))\n\n  return writer.flush(code.parse)\n}\n\ntype ValueMapper = (param: unknown, index: number) => LegalValue\n\ntype BindOpts = {\n  portal?: string\n  binary?: boolean\n  statement?: string\n  values?: LegalValue[]\n  // optional map from JS value to postgres value per parameter\n  valueMapper?: ValueMapper\n}\n\nconst paramWriter = new Writer()\n\n// make this a const enum so typescript will inline the value\nconst enum ParamType {\n  STRING = 0,\n  BINARY = 1,\n}\n\nconst writeValues = (values: LegalValue[], valueMapper?: ValueMapper): void => {\n  for (let i = 0; i < values.length; i++) {\n    const mappedVal = valueMapper ? valueMapper(values[i], i) : values[i]\n    if (mappedVal === null) {\n      // add the param type (string) to the writer\n      writer.addInt16(ParamType.STRING)\n      // write -1 to the param writer to indicate null\n      paramWriter.addInt32(-1)\n    } else if (\n      mappedVal instanceof ArrayBuffer ||\n      ArrayBuffer.isView(mappedVal)\n    ) {\n      const buffer = ArrayBuffer.isView(mappedVal)\n        ? mappedVal.buffer.slice(\n            mappedVal.byteOffset,\n            mappedVal.byteOffset + mappedVal.byteLength,\n          )\n        : mappedVal\n      // add the param type (binary) to the writer\n      writer.addInt16(ParamType.BINARY)\n      // add the buffer to the param writer\n      paramWriter.addInt32(buffer.byteLength)\n      paramWriter.add(buffer)\n    } else {\n      // add the param type (string) to the writer\n      writer.addInt16(ParamType.STRING)\n      paramWriter.addInt32(byteLengthUtf8(mappedVal))\n      paramWriter.addString(mappedVal)\n    }\n  }\n}\n\nconst bind = (config: BindOpts = {}): Uint8Array => {\n  // normalize config\n  const portal = config.portal ?? ''\n  const statement = config.statement ?? ''\n  const binary = config.binary ?? false\n  const values = config.values ?? emptyValueArray\n  const len = values.length\n\n  writer.addCString(portal).addCString(statement)\n  writer.addInt16(len)\n\n  writeValues(values, config.valueMapper)\n\n  writer.addInt16(len)\n  writer.add(paramWriter.flush())\n\n  // format code\n  writer.addInt16(binary ? ParamType.BINARY : ParamType.STRING)\n  return writer.flush(code.bind)\n}\n\ntype ExecOpts = {\n  portal?: string\n  rows?: number\n}\n\nconst emptyExecute = new Uint8Array([\n  code.execute,\n  0x00,\n  0x00,\n  0x00,\n  0x09,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n])\n\nconst execute = (config?: ExecOpts): Uint8Array => {\n  // this is the happy path for most queries\n  if (!config || (!config.portal && !config.rows)) {\n    return emptyExecute\n  }\n\n  const portal = config.portal ?? ''\n  const rows = config.rows ?? 0\n\n  const portalLength = byteLengthUtf8(portal)\n  const len = 4 + portalLength + 1 + 4\n  // one extra bit for code\n  const bufferView = new DataView(new ArrayBuffer(1 + len))\n  bufferView.setUint8(0, code.execute)\n  bufferView.setInt32(1, len, false)\n  new TextEncoder().encodeInto(portal, new Uint8Array(bufferView.buffer, 5))\n  bufferView.setUint8(portalLength + 5, 0) // null terminate portal cString\n  bufferView.setUint32(bufferView.byteLength - 4, rows, false)\n  return new Uint8Array(bufferView.buffer)\n}\n\nconst cancel = (processID: number, secretKey: number): Uint8Array => {\n  const bufferView = new DataView(new ArrayBuffer(16))\n  bufferView.setInt32(0, 16, false)\n  bufferView.setInt16(4, 1234, false)\n  bufferView.setInt16(6, 5678, false)\n  bufferView.setInt32(8, processID, false)\n  bufferView.setInt32(12, secretKey, false)\n  return new Uint8Array(bufferView.buffer)\n}\n\ntype PortalOpts = {\n  type: 'S' | 'P'\n  name?: string\n}\n\nconst cstringMessage = (code: code, string: string): Uint8Array => {\n  const writer = new Writer()\n  writer.addCString(string)\n  return writer.flush(code)\n}\n\nconst emptyDescribePortal = writer.addCString('P').flush(code.describe)\nconst emptyDescribeStatement = writer.addCString('S').flush(code.describe)\n\nconst describe = (msg: PortalOpts): Uint8Array => {\n  return msg.name\n    ? cstringMessage(code.describe, `${msg.type}${msg.name ?? ''}`)\n    : msg.type === 'P'\n      ? emptyDescribePortal\n      : emptyDescribeStatement\n}\n\nconst close = (msg: PortalOpts): Uint8Array => {\n  const text = `${msg.type}${msg.name ?? ''}`\n  return cstringMessage(code.close, text)\n}\n\nconst copyData = (chunk: ArrayBuffer): Uint8Array => {\n  return writer.add(chunk).flush(code.copyFromChunk)\n}\n\nconst copyFail = (message: string): Uint8Array => {\n  return cstringMessage(code.copyFail, message)\n}\n\nconst codeOnlyBuffer = (code: code): Uint8Array =>\n  new Uint8Array([code, 0x00, 0x00, 0x00, 0x04])\n\nconst flushBuffer = codeOnlyBuffer(code.flush)\nconst syncBuffer = codeOnlyBuffer(code.sync)\nconst endBuffer = codeOnlyBuffer(code.end)\nconst copyDoneBuffer = codeOnlyBuffer(code.copyDone)\n\nconst serialize = {\n  startup,\n  password,\n  requestSsl,\n  sendSASLInitialResponseMessage,\n  sendSCRAMClientFinalMessage,\n  query,\n  parse,\n  bind,\n  execute,\n  describe,\n  close,\n  flush: () => flushBuffer,\n  sync: () => syncBuffer,\n  end: () => endBuffer,\n  copyData,\n  copyDone: () => copyDoneBuffer,\n  copyFail,\n  cancel,\n}\n\nexport { serialize }\n","import { byteLengthUtf8 } from './string-utils'\n\nexport class Writer {\n  #bufferView: DataView\n  #offset: number = 5\n\n  readonly #littleEndian = false as const\n  readonly #encoder = new TextEncoder()\n  readonly #headerPosition: number = 0\n  constructor(private size = 256) {\n    this.#bufferView = this.#allocateBuffer(size)\n  }\n\n  #allocateBuffer(size: number): DataView {\n    return new DataView(new ArrayBuffer(size))\n  }\n\n  #ensure(size: number): void {\n    const remaining = this.#bufferView.byteLength - this.#offset\n    if (remaining < size) {\n      const oldBuffer = this.#bufferView.buffer\n      // exponential growth factor of around ~ 1.5\n      // https://stackoverflow.com/questions/2269063/buffer-growth-strategy\n      const newSize = oldBuffer.byteLength + (oldBuffer.byteLength >> 1) + size\n      this.#bufferView = this.#allocateBuffer(newSize)\n      new Uint8Array(this.#bufferView.buffer).set(new Uint8Array(oldBuffer))\n    }\n  }\n\n  public addInt32(num: number): Writer {\n    this.#ensure(4)\n    this.#bufferView.setInt32(this.#offset, num, this.#littleEndian)\n    this.#offset += 4\n    return this\n  }\n\n  public addInt16(num: number): Writer {\n    this.#ensure(2)\n    this.#bufferView.setInt16(this.#offset, num, this.#littleEndian)\n    this.#offset += 2\n    return this\n  }\n\n  public addCString(string: string): Writer {\n    if (string) {\n      // TODO(msfstef): might be faster to extract `addString` code and\n      // ensure length + 1 once rather than length and then +1?\n      this.addString(string)\n    }\n\n    // set null terminator\n    this.#ensure(1)\n    this.#bufferView.setUint8(this.#offset, 0)\n    this.#offset++\n    return this\n  }\n\n  public addString(string: string = ''): Writer {\n    const length = byteLengthUtf8(string)\n    this.#ensure(length)\n    this.#encoder.encodeInto(\n      string,\n      new Uint8Array(this.#bufferView.buffer, this.#offset),\n    )\n    this.#offset += length\n    return this\n  }\n\n  public add(otherBuffer: ArrayBuffer): Writer {\n    this.#ensure(otherBuffer.byteLength)\n    new Uint8Array(this.#bufferView.buffer).set(\n      new Uint8Array(otherBuffer),\n      this.#offset,\n    )\n\n    this.#offset += otherBuffer.byteLength\n    return this\n  }\n\n  #join(code?: number): ArrayBuffer {\n    if (code) {\n      this.#bufferView.setUint8(this.#headerPosition, code)\n      // length is everything in this packet minus the code\n      const length = this.#offset - (this.#headerPosition + 1)\n      this.#bufferView.setInt32(\n        this.#headerPosition + 1,\n        length,\n        this.#littleEndian,\n      )\n    }\n    return this.#bufferView.buffer.slice(code ? 0 : 5, this.#offset)\n  }\n\n  public flush(code?: number): Uint8Array {\n    const result = this.#join(code)\n    this.#offset = 5\n    this.#bufferView = this.#allocateBuffer(this.size)\n    return new Uint8Array(result)\n  }\n}\n","/**\n * Calculates the byte length of a UTF-8 encoded string\n * Adapted from https://stackoverflow.com/a/23329386\n * @param str - UTF-8 encoded string\n * @returns byte length of string\n */\nfunction byteLengthUtf8(str: string): number {\n  let byteLength = str.length\n  for (let i = str.length - 1; i >= 0; i--) {\n    const code = str.charCodeAt(i)\n    if (code > 0x7f && code <= 0x7ff) byteLength++\n    else if (code > 0x7ff && code <= 0xffff) byteLength += 2\n    if (code >= 0xdc00 && code <= 0xdfff) i-- // trail surrogate\n  }\n  return byteLength\n}\n\nexport { byteLengthUtf8 }\n","import {\n  bindComplete,\n  parseComplete,\n  closeComplete,\n  noData,\n  portalSuspended,\n  copyDone,\n  replicationStart,\n  emptyQuery,\n  ReadyForQueryMessage,\n  CommandCompleteMessage,\n  CopyDataMessage,\n  CopyResponse,\n  NotificationResponseMessage,\n  RowDescriptionMessage,\n  ParameterDescriptionMessage,\n  Field,\n  DataRowMessage,\n  ParameterStatusMessage,\n  BackendKeyDataMessage,\n  DatabaseError,\n  BackendMessage,\n  MessageName,\n  NoticeMessage,\n  AuthenticationMessage,\n  AuthenticationOk,\n  AuthenticationCleartextPassword,\n  AuthenticationMD5Password,\n  AuthenticationSASL,\n  AuthenticationSASLContinue,\n  AuthenticationSASLFinal,\n} from './messages'\nimport { BufferParameter, Modes } from './types'\nimport { BufferReader } from './buffer-reader'\n\n// every message is prefixed with a single bye\nconst CODE_LENGTH = 1 as const\n// every message has an int32 length which includes itself but does\n// NOT include the code in the length\nconst LEN_LENGTH = 4 as const\n\nconst HEADER_LENGTH = CODE_LENGTH + LEN_LENGTH\n\nexport type Packet = {\n  code: number\n  packet: ArrayBuffer\n}\n\nconst emptyBuffer = new ArrayBuffer(0)\n\nconst enum MessageCodes {\n  DataRow = 0x44, // D\n  ParseComplete = 0x31, // 1\n  BindComplete = 0x32, // 2\n  CloseComplete = 0x33, // 3\n  CommandComplete = 0x43, // C\n  ReadyForQuery = 0x5a, // Z\n  NoData = 0x6e, // n\n  NotificationResponse = 0x41, // A\n  AuthenticationResponse = 0x52, // R\n  ParameterStatus = 0x53, // S\n  BackendKeyData = 0x4b, // K\n  ErrorMessage = 0x45, // E\n  NoticeMessage = 0x4e, // N\n  RowDescriptionMessage = 0x54, // T\n  ParameterDescriptionMessage = 0x74, // t\n  PortalSuspended = 0x73, // s\n  ReplicationStart = 0x57, // W\n  EmptyQuery = 0x49, // I\n  CopyIn = 0x47, // G\n  CopyOut = 0x48, // H\n  CopyDone = 0x63, // c\n  CopyData = 0x64, // d\n}\n\nexport type MessageCallback = (msg: BackendMessage) => void\n\nexport class Parser {\n  #bufferView: DataView = new DataView(emptyBuffer)\n  #bufferRemainingLength: number = 0\n  #bufferOffset: number = 0\n  #reader = new BufferReader()\n\n  public parse(buffer: BufferParameter, callback: MessageCallback) {\n    this.#mergeBuffer(\n      ArrayBuffer.isView(buffer)\n        ? buffer.buffer.slice(\n            buffer.byteOffset,\n            buffer.byteOffset + buffer.byteLength,\n          )\n        : buffer,\n    )\n    const bufferFullLength = this.#bufferOffset + this.#bufferRemainingLength\n    let offset = this.#bufferOffset\n    while (offset + HEADER_LENGTH <= bufferFullLength) {\n      // code is 1 byte long - it identifies the message type\n      const code = this.#bufferView.getUint8(offset)\n      // length is 1 Uint32BE - it is the length of the message EXCLUDING the code\n      const length = this.#bufferView.getUint32(offset + CODE_LENGTH, false)\n      const fullMessageLength = CODE_LENGTH + length\n      if (fullMessageLength + offset <= bufferFullLength) {\n        const message = this.#handlePacket(\n          offset + HEADER_LENGTH,\n          code,\n          length,\n          this.#bufferView.buffer,\n        )\n        callback(message)\n        offset += fullMessageLength\n      } else {\n        break\n      }\n    }\n    if (offset === bufferFullLength) {\n      // No more use for the buffer\n      this.#bufferView = new DataView(emptyBuffer)\n      this.#bufferRemainingLength = 0\n      this.#bufferOffset = 0\n    } else {\n      // Adjust the cursors of remainingBuffer\n      this.#bufferRemainingLength = bufferFullLength - offset\n      this.#bufferOffset = offset\n    }\n  }\n\n  #mergeBuffer(buffer: ArrayBuffer): void {\n    if (this.#bufferRemainingLength > 0) {\n      const newLength = this.#bufferRemainingLength + buffer.byteLength\n      const newFullLength = newLength + this.#bufferOffset\n      if (newFullLength > this.#bufferView.byteLength) {\n        // We can't concat the new buffer with the remaining one\n        let newBuffer: ArrayBuffer\n        if (\n          newLength <= this.#bufferView.byteLength &&\n          this.#bufferOffset >= this.#bufferRemainingLength\n        ) {\n          // We can move the relevant part to the beginning of the buffer instead of allocating a new buffer\n          newBuffer = this.#bufferView.buffer\n        } else {\n          // Allocate a new larger buffer\n          let newBufferLength = this.#bufferView.byteLength * 2\n          while (newLength >= newBufferLength) {\n            newBufferLength *= 2\n          }\n          newBuffer = new ArrayBuffer(newBufferLength)\n        }\n        // Move the remaining buffer to the new one\n        new Uint8Array(newBuffer).set(\n          new Uint8Array(\n            this.#bufferView.buffer,\n            this.#bufferOffset,\n            this.#bufferRemainingLength,\n          ),\n        )\n        this.#bufferView = new DataView(newBuffer)\n        this.#bufferOffset = 0\n      }\n\n      // Concat the new buffer with the remaining one\n      new Uint8Array(this.#bufferView.buffer).set(\n        new Uint8Array(buffer),\n        this.#bufferOffset + this.#bufferRemainingLength,\n      )\n      this.#bufferRemainingLength = newLength\n    } else {\n      this.#bufferView = new DataView(buffer)\n      this.#bufferOffset = 0\n      this.#bufferRemainingLength = buffer.byteLength\n    }\n  }\n\n  #handlePacket(\n    offset: number,\n    code: number,\n    length: number,\n    bytes: ArrayBuffer,\n  ): BackendMessage {\n    switch (code) {\n      case MessageCodes.BindComplete:\n        return bindComplete\n      case MessageCodes.ParseComplete:\n        return parseComplete\n      case MessageCodes.CloseComplete:\n        return closeComplete\n      case MessageCodes.NoData:\n        return noData\n      case MessageCodes.PortalSuspended:\n        return portalSuspended\n      case MessageCodes.CopyDone:\n        return copyDone\n      case MessageCodes.ReplicationStart:\n        return replicationStart\n      case MessageCodes.EmptyQuery:\n        return emptyQuery\n      case MessageCodes.DataRow:\n        return this.#parseDataRowMessage(offset, length, bytes)\n      case MessageCodes.CommandComplete:\n        return this.#parseCommandCompleteMessage(offset, length, bytes)\n      case MessageCodes.ReadyForQuery:\n        return this.#parseReadyForQueryMessage(offset, length, bytes)\n      case MessageCodes.NotificationResponse:\n        return this.#parseNotificationMessage(offset, length, bytes)\n      case MessageCodes.AuthenticationResponse:\n        return this.#parseAuthenticationResponse(offset, length, bytes)\n      case MessageCodes.ParameterStatus:\n        return this.#parseParameterStatusMessage(offset, length, bytes)\n      case MessageCodes.BackendKeyData:\n        return this.#parseBackendKeyData(offset, length, bytes)\n      case MessageCodes.ErrorMessage:\n        return this.#parseErrorMessage(offset, length, bytes, 'error')\n      case MessageCodes.NoticeMessage:\n        return this.#parseErrorMessage(offset, length, bytes, 'notice')\n      case MessageCodes.RowDescriptionMessage:\n        return this.#parseRowDescriptionMessage(offset, length, bytes)\n      case MessageCodes.ParameterDescriptionMessage:\n        return this.#parseParameterDescriptionMessage(offset, length, bytes)\n      case MessageCodes.CopyIn:\n        return this.#parseCopyInMessage(offset, length, bytes)\n      case MessageCodes.CopyOut:\n        return this.#parseCopyOutMessage(offset, length, bytes)\n      case MessageCodes.CopyData:\n        return this.#parseCopyData(offset, length, bytes)\n      default:\n        return new DatabaseError(\n          'received invalid response: ' + code.toString(16),\n          length,\n          'error',\n        )\n    }\n  }\n\n  #parseReadyForQueryMessage(\n    offset: number,\n    length: number,\n    bytes: ArrayBuffer,\n  ) {\n    this.#reader.setBuffer(offset, bytes)\n    const status = this.#reader.string(1)\n    return new ReadyForQueryMessage(length, status)\n  }\n\n  #parseCommandCompleteMessage(\n    offset: number,\n    length: number,\n    bytes: ArrayBuffer,\n  ) {\n    this.#reader.setBuffer(offset, bytes)\n    const text = this.#reader.cstring()\n    return new CommandCompleteMessage(length, text)\n  }\n\n  #parseCopyData(offset: number, length: number, bytes: ArrayBuffer) {\n    const chunk = bytes.slice(offset, offset + (length - 4))\n    return new CopyDataMessage(length, new Uint8Array(chunk))\n  }\n\n  #parseCopyInMessage(offset: number, length: number, bytes: ArrayBuffer) {\n    return this.#parseCopyMessage(offset, length, bytes, 'copyInResponse')\n  }\n\n  #parseCopyOutMessage(offset: number, length: number, bytes: ArrayBuffer) {\n    return this.#parseCopyMessage(offset, length, bytes, 'copyOutResponse')\n  }\n\n  #parseCopyMessage(\n    offset: number,\n    length: number,\n    bytes: ArrayBuffer,\n    messageName: MessageName,\n  ) {\n    this.#reader.setBuffer(offset, bytes)\n    const isBinary = this.#reader.byte() !== 0\n    const columnCount = this.#reader.int16()\n    const message = new CopyResponse(length, messageName, isBinary, columnCount)\n    for (let i = 0; i < columnCount; i++) {\n      message.columnTypes[i] = this.#reader.int16()\n    }\n    return message\n  }\n\n  #parseNotificationMessage(\n    offset: number,\n    length: number,\n    bytes: ArrayBuffer,\n  ) {\n    this.#reader.setBuffer(offset, bytes)\n    const processId = this.#reader.int32()\n    const channel = this.#reader.cstring()\n    const payload = this.#reader.cstring()\n    return new NotificationResponseMessage(length, processId, channel, payload)\n  }\n\n  #parseRowDescriptionMessage(\n    offset: number,\n    length: number,\n    bytes: ArrayBuffer,\n  ) {\n    this.#reader.setBuffer(offset, bytes)\n    const fieldCount = this.#reader.int16()\n    const message = new RowDescriptionMessage(length, fieldCount)\n    for (let i = 0; i < fieldCount; i++) {\n      message.fields[i] = this.#parseField()\n    }\n    return message\n  }\n\n  #parseField(): Field {\n    const name = this.#reader.cstring()\n    const tableID = this.#reader.int32()\n    const columnID = this.#reader.int16()\n    const dataTypeID = this.#reader.int32()\n    const dataTypeSize = this.#reader.int16()\n    const dataTypeModifier = this.#reader.int32()\n    const mode = this.#reader.int16() === 0 ? Modes.text : Modes.binary\n    return new Field(\n      name,\n      tableID,\n      columnID,\n      dataTypeID,\n      dataTypeSize,\n      dataTypeModifier,\n      mode,\n    )\n  }\n\n  #parseParameterDescriptionMessage(\n    offset: number,\n    length: number,\n    bytes: ArrayBuffer,\n  ) {\n    this.#reader.setBuffer(offset, bytes)\n    const parameterCount = this.#reader.int16()\n    const message = new ParameterDescriptionMessage(length, parameterCount)\n    for (let i = 0; i < parameterCount; i++) {\n      message.dataTypeIDs[i] = this.#reader.int32()\n    }\n    return message\n  }\n\n  #parseDataRowMessage(offset: number, length: number, bytes: ArrayBuffer) {\n    this.#reader.setBuffer(offset, bytes)\n    const fieldCount = this.#reader.int16()\n    const fields: (string | null)[] = new Array(fieldCount)\n    for (let i = 0; i < fieldCount; i++) {\n      const len = this.#reader.int32()\n      // a -1 for length means the value of the field is null\n      fields[i] = len === -1 ? null : this.#reader.string(len)\n    }\n    return new DataRowMessage(length, fields)\n  }\n\n  #parseParameterStatusMessage(\n    offset: number,\n    length: number,\n    bytes: ArrayBuffer,\n  ) {\n    this.#reader.setBuffer(offset, bytes)\n    const name = this.#reader.cstring()\n    const value = this.#reader.cstring()\n    return new ParameterStatusMessage(length, name, value)\n  }\n\n  #parseBackendKeyData(offset: number, length: number, bytes: ArrayBuffer) {\n    this.#reader.setBuffer(offset, bytes)\n    const processID = this.#reader.int32()\n    const secretKey = this.#reader.int32()\n    return new BackendKeyDataMessage(length, processID, secretKey)\n  }\n\n  #parseAuthenticationResponse(\n    offset: number,\n    length: number,\n    bytes: ArrayBuffer,\n  ): AuthenticationMessage {\n    this.#reader.setBuffer(offset, bytes)\n    const code = this.#reader.int32()\n    switch (code) {\n      case 0:\n        return new AuthenticationOk(length)\n      case 3:\n        return new AuthenticationCleartextPassword(length)\n\n      case 5:\n        return new AuthenticationMD5Password(length, this.#reader.bytes(4))\n\n      case 10: {\n        const mechanisms: string[] = []\n        while (true) {\n          const mechanism = this.#reader.cstring()\n          if (mechanism.length === 0) {\n            return new AuthenticationSASL(length, mechanisms)\n          }\n          mechanisms.push(mechanism)\n        }\n      }\n      case 11:\n        return new AuthenticationSASLContinue(\n          length,\n          this.#reader.string(length - 8),\n        )\n\n      case 12:\n        return new AuthenticationSASLFinal(\n          length,\n          this.#reader.string(length - 8),\n        )\n\n      default:\n        throw new Error('Unknown authenticationOk message type ' + code)\n    }\n  }\n\n  #parseErrorMessage(\n    offset: number,\n    length: number,\n    bytes: ArrayBuffer,\n    name: MessageName,\n  ) {\n    this.#reader.setBuffer(offset, bytes)\n    const fields: Record<string, string> = {}\n    let fieldType = this.#reader.string(1)\n    while (fieldType !== '\\0') {\n      fields[fieldType] = this.#reader.cstring()\n      fieldType = this.#reader.string(1)\n    }\n\n    const messageValue = fields.M\n\n    const message =\n      name === 'notice'\n        ? new NoticeMessage(length, messageValue)\n        : new DatabaseError(messageValue, length, name)\n\n    message.severity = fields.S\n    message.code = fields.C\n    message.detail = fields.D\n    message.hint = fields.H\n    message.position = fields.P\n    message.internalPosition = fields.p\n    message.internalQuery = fields.q\n    message.where = fields.W\n    message.schema = fields.s\n    message.table = fields.t\n    message.column = fields.c\n    message.dataType = fields.d\n    message.constraint = fields.n\n    message.file = fields.F\n    message.line = fields.L\n    message.routine = fields.R\n    return message\n  }\n}\n","import { Mode } from './types'\n\nexport type MessageName =\n  | 'parseComplete'\n  | 'bindComplete'\n  | 'closeComplete'\n  | 'noData'\n  | 'portalSuspended'\n  | 'replicationStart'\n  | 'emptyQuery'\n  | 'copyDone'\n  | 'copyData'\n  | 'rowDescription'\n  | 'parameterDescription'\n  | 'parameterStatus'\n  | 'backendKeyData'\n  | 'notification'\n  | 'readyForQuery'\n  | 'commandComplete'\n  | 'dataRow'\n  | 'copyInResponse'\n  | 'copyOutResponse'\n  | 'authenticationOk'\n  | 'authenticationMD5Password'\n  | 'authenticationCleartextPassword'\n  | 'authenticationSASL'\n  | 'authenticationSASLContinue'\n  | 'authenticationSASLFinal'\n  | 'error'\n  | 'notice'\n\nexport type BackendMessage = {\n  name: MessageName\n  length: number\n}\n\nexport const parseComplete: BackendMessage = {\n  name: 'parseComplete',\n  length: 5,\n}\n\nexport const bindComplete: BackendMessage = {\n  name: 'bindComplete',\n  length: 5,\n}\n\nexport const closeComplete: BackendMessage = {\n  name: 'closeComplete',\n  length: 5,\n}\n\nexport const noData: BackendMessage = {\n  name: 'noData',\n  length: 5,\n}\n\nexport const portalSuspended: BackendMessage = {\n  name: 'portalSuspended',\n  length: 5,\n}\n\nexport const replicationStart: BackendMessage = {\n  name: 'replicationStart',\n  length: 4,\n}\n\nexport const emptyQuery: BackendMessage = {\n  name: 'emptyQuery',\n  length: 4,\n}\n\nexport const copyDone: BackendMessage = {\n  name: 'copyDone',\n  length: 4,\n}\n\nexport class AuthenticationOk implements BackendMessage {\n  public readonly name = 'authenticationOk'\n  constructor(public readonly length: number) {}\n}\n\nexport class AuthenticationCleartextPassword implements BackendMessage {\n  public readonly name = 'authenticationCleartextPassword'\n  constructor(public readonly length: number) {}\n}\n\nexport class AuthenticationMD5Password implements BackendMessage {\n  public readonly name = 'authenticationMD5Password'\n  constructor(\n    public readonly length: number,\n    public readonly salt: Uint8Array,\n  ) {}\n}\n\nexport class AuthenticationSASL implements BackendMessage {\n  public readonly name = 'authenticationSASL'\n  constructor(\n    public readonly length: number,\n    public readonly mechanisms: string[],\n  ) {}\n}\n\nexport class AuthenticationSASLContinue implements BackendMessage {\n  public readonly name = 'authenticationSASLContinue'\n  constructor(\n    public readonly length: number,\n    public readonly data: string,\n  ) {}\n}\n\nexport class AuthenticationSASLFinal implements BackendMessage {\n  public readonly name = 'authenticationSASLFinal'\n  constructor(\n    public readonly length: number,\n    public readonly data: string,\n  ) {}\n}\n\nexport type AuthenticationMessage =\n  | AuthenticationOk\n  | AuthenticationCleartextPassword\n  | AuthenticationMD5Password\n  | AuthenticationSASL\n  | AuthenticationSASLContinue\n  | AuthenticationSASLFinal\n\ninterface NoticeOrError {\n  message: string | undefined\n  severity: string | undefined\n  code: string | undefined\n  detail: string | undefined\n  hint: string | undefined\n  position: string | undefined\n  internalPosition: string | undefined\n  internalQuery: string | undefined\n  where: string | undefined\n  schema: string | undefined\n  table: string | undefined\n  column: string | undefined\n  dataType: string | undefined\n  constraint: string | undefined\n  file: string | undefined\n  line: string | undefined\n  routine: string | undefined\n}\n\nexport class DatabaseError extends Error implements NoticeOrError {\n  public severity: string | undefined\n  public code: string | undefined\n  public detail: string | undefined\n  public hint: string | undefined\n  public position: string | undefined\n  public internalPosition: string | undefined\n  public internalQuery: string | undefined\n  public where: string | undefined\n  public schema: string | undefined\n  public table: string | undefined\n  public column: string | undefined\n  public dataType: string | undefined\n  public constraint: string | undefined\n  public file: string | undefined\n  public line: string | undefined\n  public routine: string | undefined\n  constructor(\n    message: string,\n    public readonly length: number,\n    public readonly name: MessageName,\n  ) {\n    super(message)\n  }\n}\n\nexport class CopyDataMessage implements BackendMessage {\n  public readonly name = 'copyData'\n  constructor(\n    public readonly length: number,\n    public readonly chunk: Uint8Array,\n  ) {}\n}\n\nexport class CopyResponse implements BackendMessage {\n  public readonly columnTypes: number[]\n  constructor(\n    public readonly length: number,\n    public readonly name: MessageName,\n    public readonly binary: boolean,\n    columnCount: number,\n  ) {\n    this.columnTypes = new Array(columnCount)\n  }\n}\n\nexport class Field {\n  constructor(\n    public readonly name: string,\n    public readonly tableID: number,\n    public readonly columnID: number,\n    public readonly dataTypeID: number,\n    public readonly dataTypeSize: number,\n    public readonly dataTypeModifier: number,\n    public readonly format: Mode,\n  ) {}\n}\n\nexport class RowDescriptionMessage implements BackendMessage {\n  public readonly name: MessageName = 'rowDescription'\n  public readonly fields: Field[]\n  constructor(\n    public readonly length: number,\n    public readonly fieldCount: number,\n  ) {\n    this.fields = new Array(this.fieldCount)\n  }\n}\n\nexport class ParameterDescriptionMessage implements BackendMessage {\n  public readonly name: MessageName = 'parameterDescription'\n  public readonly dataTypeIDs: number[]\n  constructor(\n    public readonly length: number,\n    public readonly parameterCount: number,\n  ) {\n    this.dataTypeIDs = new Array(this.parameterCount)\n  }\n}\n\nexport class ParameterStatusMessage implements BackendMessage {\n  public readonly name: MessageName = 'parameterStatus'\n  constructor(\n    public readonly length: number,\n    public readonly parameterName: string,\n    public readonly parameterValue: string,\n  ) {}\n}\n\nexport class BackendKeyDataMessage implements BackendMessage {\n  public readonly name: MessageName = 'backendKeyData'\n  constructor(\n    public readonly length: number,\n    public readonly processID: number,\n    public readonly secretKey: number,\n  ) {}\n}\n\nexport class NotificationResponseMessage implements BackendMessage {\n  public readonly name: MessageName = 'notification'\n  constructor(\n    public readonly length: number,\n    public readonly processId: number,\n    public readonly channel: string,\n    public readonly payload: string,\n  ) {}\n}\n\nexport class ReadyForQueryMessage implements BackendMessage {\n  public readonly name: MessageName = 'readyForQuery'\n  constructor(\n    public readonly length: number,\n    public readonly status: string,\n  ) {}\n}\n\nexport class CommandCompleteMessage implements BackendMessage {\n  public readonly name: MessageName = 'commandComplete'\n  constructor(\n    public readonly length: number,\n    public readonly text: string,\n  ) {}\n}\n\nexport class DataRowMessage implements BackendMessage {\n  public readonly fieldCount: number\n  public readonly name: MessageName = 'dataRow'\n  constructor(\n    public length: number,\n    public fields: (string | null)[],\n  ) {\n    this.fieldCount = fields.length\n  }\n}\n\nexport class NoticeMessage implements BackendMessage, NoticeOrError {\n  constructor(\n    public readonly length: number,\n    public readonly message: string | undefined,\n  ) {}\n  public readonly name = 'notice'\n  public severity: string | undefined\n  public code: string | undefined\n  public detail: string | undefined\n  public hint: string | undefined\n  public position: string | undefined\n  public internalPosition: string | undefined\n  public internalQuery: string | undefined\n  public where: string | undefined\n  public schema: string | undefined\n  public table: string | undefined\n  public column: string | undefined\n  public dataType: string | undefined\n  public constraint: string | undefined\n  public file: string | undefined\n  public line: string | undefined\n  public routine: string | undefined\n}\n","export const Modes = {\n  text: 0,\n  binary: 1,\n} as const\n\nexport type Mode = (typeof Modes)[keyof typeof Modes]\n\nexport type BufferParameter = ArrayBuffer | ArrayBufferView\n","const emptyBuffer = new ArrayBuffer(0)\n\nexport class BufferReader {\n  #bufferView: DataView = new DataView(emptyBuffer)\n  #offset: number\n\n  // TODO(bmc): support non-utf8 encoding?\n  readonly #encoding: string = 'utf-8' as const\n  readonly #decoder = new TextDecoder(this.#encoding)\n  readonly #littleEndian: boolean = false as const\n\n  constructor(offset: number = 0) {\n    this.#offset = offset\n  }\n\n  public setBuffer(offset: number, buffer: ArrayBuffer): void {\n    this.#offset = offset\n    this.#bufferView = new DataView(buffer)\n  }\n\n  public int16(): number {\n    // const result = this.buffer.readInt16BE(this.#offset)\n    const result = this.#bufferView.getInt16(this.#offset, this.#littleEndian)\n    this.#offset += 2\n    return result\n  }\n\n  public byte(): number {\n    // const result = this.bufferView[this.#offset]\n    const result = this.#bufferView.getUint8(this.#offset)\n    this.#offset++\n    return result\n  }\n\n  public int32(): number {\n    // const result = this.buffer.readInt32BE(this.#offset)\n    const result = this.#bufferView.getInt32(this.#offset, this.#littleEndian)\n    this.#offset += 4\n    return result\n  }\n\n  public string(length: number): string {\n    // const result = this.#bufferView.toString(\n    //   this.#encoding,\n    //   this.#offset,\n    //   this.#offset + length,\n    // )\n    // this.#offset += length\n\n    const result = this.#decoder.decode(this.bytes(length))\n    return result\n  }\n\n  public cstring(): string {\n    // const start = this.#offset\n    // let end = start\n    // while (this.#bufferView[end++] !== 0) {}\n\n    const start = this.#offset\n    let end = start\n    while (this.#bufferView.getUint8(end++) !== 0) {\n      // no-op - increment until terminator reached\n    }\n    const result = this.string(end - start - 1)\n    this.#offset = end\n    return result\n  }\n\n  public bytes(length: number): Uint8Array {\n    // const result = this.buffer.slice(this.#offset, this.#offset + length)\n    const result = this.#bufferView.buffer.slice(\n      this.#offset,\n      this.#offset + length,\n    )\n    this.#offset += length\n    return new Uint8Array(result)\n  }\n}\n","import {\n  BackendMessage,\n  RowDescriptionMessage,\n  DataRowMessage,\n  CommandCompleteMessage,\n  ParameterDescriptionMessage,\n} from '@electric-sql/pg-protocol/messages'\nimport type { Results, QueryOptions } from './interface.js'\nimport { parseType, type Parser } from './types.js'\n\n/**\n * This function is used to parse the results of either a simple or extended query.\n * https://www.postgresql.org/docs/current/protocol-flow.html#PROTOCOL-FLOW-SIMPLE-QUERY\n */\nexport function parseResults(\n  messages: Array<BackendMessage>,\n  defaultParsers: Record<number | string, Parser>,\n  options?: QueryOptions,\n  blob?: Blob,\n): Array<Results> {\n  const resultSets: Results[] = []\n  let currentResultSet: Results = { rows: [], fields: [] }\n  let affectedRows = 0\n  const parsers = { ...defaultParsers, ...options?.parsers }\n\n  const filteredMessages = messages.filter(\n    (msg) =>\n      msg.name === 'rowDescription' ||\n      msg.name === 'dataRow' ||\n      msg.name === 'commandComplete',\n  )\n\n  filteredMessages.forEach((message, index) => {\n    if (message.name === 'rowDescription') {\n      const msg = message as RowDescriptionMessage\n      currentResultSet.fields = msg.fields.map((field) => ({\n        name: field.name,\n        dataTypeID: field.dataTypeID,\n      }))\n    } else if (message.name === 'dataRow' && currentResultSet) {\n      const msg = message as DataRowMessage\n      if (options?.rowMode === 'array') {\n        currentResultSet.rows.push(\n          msg.fields.map((field, i) =>\n            parseType(field, currentResultSet!.fields[i].dataTypeID, parsers),\n          ),\n        )\n      } else {\n        // rowMode === \"object\"\n        currentResultSet.rows.push(\n          Object.fromEntries(\n            msg.fields.map((field, i) => [\n              currentResultSet!.fields[i].name,\n              parseType(field, currentResultSet!.fields[i].dataTypeID, parsers),\n            ]),\n          ),\n        )\n      }\n    } else if (message.name === 'commandComplete') {\n      const msg = message as CommandCompleteMessage\n      affectedRows += retrieveRowCount(msg)\n\n      if (index === filteredMessages.length - 1)\n        resultSets.push({\n          ...currentResultSet,\n          affectedRows,\n          ...(blob ? { blob } : {}),\n        })\n      else resultSets.push(currentResultSet)\n\n      currentResultSet = { rows: [], fields: [] }\n    }\n  })\n\n  if (resultSets.length === 0) {\n    resultSets.push({\n      rows: [],\n      fields: [],\n    })\n  }\n\n  return resultSets\n}\n\nfunction retrieveRowCount(msg: CommandCompleteMessage): number {\n  const parts = msg.text.split(' ')\n  switch (parts[0]) {\n    case 'INSERT':\n      return parseInt(parts[2], 10)\n    case 'UPDATE':\n    case 'DELETE':\n      return parseInt(parts[1], 10)\n    default:\n      return 0\n  }\n}\n\n/** Get the dataTypeIDs from a list of messages, if it's available. */\nexport function parseDescribeStatementResults(\n  messages: Array<BackendMessage>,\n): number[] {\n  const message = messages.find(\n    (msg): msg is ParameterDescriptionMessage =>\n      msg.name === 'parameterDescription',\n  )\n\n  if (message) {\n    return message.dataTypeIDs\n  }\n\n  return []\n}\n","/*\nBased on postgres.js types.js\nhttps://github.com/porsager/postgres/blob/master/src/types.js\nPublished under the Unlicense:\nhttps://github.com/porsager/postgres/blob/master/UNLICENSE \n*/\n\nimport type { ParserOptions } from './interface.js'\n\nconst JSON_parse = globalThis.JSON.parse\nconst JSON_stringify = globalThis.JSON.stringify\n\nexport const BOOL = 16,\n  BYTEA = 17,\n  CHAR = 18,\n  INT8 = 20,\n  INT2 = 21,\n  INT4 = 23,\n  REGPROC = 24,\n  TEXT = 25,\n  OID = 26,\n  TID = 27,\n  XID = 28,\n  CID = 29,\n  JSON = 114,\n  XML = 142,\n  PG_NODE_TREE = 194,\n  SMGR = 210,\n  PATH = 602,\n  POLYGON = 604,\n  CIDR = 650,\n  FLOAT4 = 700,\n  FLOAT8 = 701,\n  ABSTIME = 702,\n  RELTIME = 703,\n  TINTERVAL = 704,\n  CIRCLE = 718,\n  MACADDR8 = 774,\n  MONEY = 790,\n  MACADDR = 829,\n  INET = 869,\n  ACLITEM = 1033,\n  BPCHAR = 1042,\n  VARCHAR = 1043,\n  DATE = 1082,\n  TIME = 1083,\n  TIMESTAMP = 1114,\n  TIMESTAMPTZ = 1184,\n  INTERVAL = 1186,\n  TIMETZ = 1266,\n  BIT = 1560,\n  VARBIT = 1562,\n  NUMERIC = 1700,\n  REFCURSOR = 1790,\n  REGPROCEDURE = 2202,\n  REGOPER = 2203,\n  REGOPERATOR = 2204,\n  REGCLASS = 2205,\n  REGTYPE = 2206,\n  UUID = 2950,\n  TXID_SNAPSHOT = 2970,\n  PG_LSN = 3220,\n  PG_NDISTINCT = 3361,\n  PG_DEPENDENCIES = 3402,\n  TSVECTOR = 3614,\n  TSQUERY = 3615,\n  GTSVECTOR = 3642,\n  REGCONFIG = 3734,\n  REGDICTIONARY = 3769,\n  JSONB = 3802,\n  REGNAMESPACE = 4089,\n  REGROLE = 4096\n\nexport const types = {\n  string: {\n    to: TEXT,\n    from: [TEXT, VARCHAR, BPCHAR],\n    serialize: (x: string | number) => {\n      if (typeof x === 'string') {\n        return x\n      } else if (typeof x === 'number') {\n        return x.toString()\n      } else {\n        throw new Error('Invalid input for string type')\n      }\n    },\n    parse: (x: string) => x,\n  },\n  number: {\n    to: 0,\n    from: [INT2, INT4, OID, FLOAT4, FLOAT8],\n    serialize: (x: number) => x.toString(),\n    parse: (x: string) => +x,\n  },\n  bigint: {\n    to: INT8,\n    from: [INT8],\n    serialize: (x: bigint) => x.toString(),\n    parse: (x: string) => {\n      const n = BigInt(x)\n      if (n < Number.MIN_SAFE_INTEGER || n > Number.MAX_SAFE_INTEGER) {\n        return n // return BigInt\n      } else {\n        return Number(n) // in range of standard JS numbers so return number\n      }\n    },\n  },\n  json: {\n    to: JSON,\n    from: [JSON, JSONB],\n    serialize: (x: any) => JSON_stringify(x),\n    parse: (x: string) => JSON_parse(x),\n  },\n  boolean: {\n    to: BOOL,\n    from: [BOOL],\n    serialize: (x: boolean) => {\n      if (typeof x !== 'boolean') {\n        throw new Error('Invalid input for boolean type')\n      }\n      return x ? 't' : 'f'\n    },\n    parse: (x: string) => x === 't',\n  },\n  date: {\n    to: TIMESTAMPTZ,\n    from: [DATE, TIMESTAMP, TIMESTAMPTZ],\n    serialize: (x: Date | string | number) => {\n      if (typeof x === 'string') {\n        return x\n      } else if (typeof x === 'number') {\n        return new Date(x).toISOString()\n      } else if (x instanceof Date) {\n        return x.toISOString()\n      } else {\n        throw new Error('Invalid input for date type')\n      }\n    },\n    parse: (x: string | number) => new Date(x),\n  },\n  bytea: {\n    to: BYTEA,\n    from: [BYTEA],\n    serialize: (x: Uint8Array) => {\n      if (!(x instanceof Uint8Array)) {\n        throw new Error('Invalid input for bytea type')\n      }\n      return (\n        '\\\\x' +\n        Array.from(x)\n          .map((byte) => byte.toString(16).padStart(2, '0'))\n          .join('')\n      )\n    },\n    parse: (x: string): Uint8Array => {\n      const hexString = x.slice(2)\n      return Uint8Array.from({ length: hexString.length / 2 }, (_, idx) =>\n        parseInt(hexString.substring(idx * 2, (idx + 1) * 2), 16),\n      )\n    },\n  },\n} satisfies TypeHandlers\n\nexport type Parser = (x: string, typeId?: number) => any\nexport type Serializer = (x: any) => string\n\nexport type TypeHandler = {\n  to: number\n  from: number | number[]\n  serialize: Serializer\n  parse: Parser\n}\n\nexport type TypeHandlers = {\n  [key: string]: TypeHandler\n}\n\nconst defaultHandlers = typeHandlers(types)\n\nexport const parsers = defaultHandlers.parsers\nexport const serializers = defaultHandlers.serializers\n\nexport function parseType(\n  x: string | null,\n  type: number,\n  parsers?: ParserOptions,\n): any {\n  if (x === null) {\n    return null\n  }\n  const handler = parsers?.[type] ?? defaultHandlers.parsers[type]\n  if (handler) {\n    return handler(x, type)\n  } else {\n    return x\n  }\n}\n\nfunction typeHandlers(types: TypeHandlers) {\n  return Object.keys(types).reduce(\n    ({ parsers, serializers }, k) => {\n      const { to, from, serialize, parse } = types[k]\n      serializers[to] = serialize\n      serializers[k] = serialize\n      parsers[k] = parse\n      if (Array.isArray(from)) {\n        from.forEach((f) => {\n          parsers[f] = parse\n          serializers[f] = serialize\n        })\n      } else {\n        parsers[from] = parse\n        serializers[from] = serialize\n      }\n      return { parsers, serializers }\n    },\n    {\n      parsers: {} as {\n        [key: number | string]: (x: string, typeId?: number) => any\n      },\n      serializers: {} as {\n        [key: number | string]: Serializer\n      },\n    },\n  )\n}\n\nconst escapeBackslash = /\\\\/g\nconst escapeQuote = /\"/g\n\nfunction arrayEscape(x: string) {\n  return x.replace(escapeBackslash, '\\\\\\\\').replace(escapeQuote, '\\\\\"')\n}\n\nexport function arraySerializer(\n  xs: any,\n  serializer: Serializer | undefined,\n  typarray: number,\n): string {\n  if (Array.isArray(xs) === false) return xs\n\n  if (!xs.length) return '{}'\n\n  const first = xs[0]\n  // Only _box (1020) has the ';' delimiter for arrays, all other types use the ',' delimiter\n  const delimiter = typarray === 1020 ? ';' : ','\n\n  if (Array.isArray(first)) {\n    return `{${xs.map((x) => arraySerializer(x, serializer, typarray)).join(delimiter)}}`\n  } else {\n    return `{${xs\n      .map((x) => {\n        if (x === undefined) {\n          x = null\n          // TODO: Add an option to specify how to handle undefined values\n        }\n        return x === null\n          ? 'null'\n          : '\"' + arrayEscape(serializer ? serializer(x) : x.toString()) + '\"'\n      })\n      .join(delimiter)}}`\n  }\n}\n\nconst arrayParserState = {\n  i: 0,\n  char: null as string | null,\n  str: '',\n  quoted: false,\n  last: 0,\n  p: null as string | null,\n}\n\nexport function arrayParser(x: string, parser: Parser, typarray: number) {\n  arrayParserState.i = arrayParserState.last = 0\n  return arrayParserLoop(arrayParserState, x, parser, typarray)[0]\n}\n\nfunction arrayParserLoop(\n  s: typeof arrayParserState,\n  x: string,\n  parser: Parser | undefined,\n  typarray: number,\n): any[] {\n  const xs = []\n  // Only _box (1020) has the ';' delimiter for arrays, all other types use the ',' delimiter\n  const delimiter = typarray === 1020 ? ';' : ','\n  for (; s.i < x.length; s.i++) {\n    s.char = x[s.i]\n    if (s.quoted) {\n      if (s.char === '\\\\') {\n        s.str += x[++s.i]\n      } else if (s.char === '\"') {\n        xs.push(parser ? parser(s.str) : s.str)\n        s.str = ''\n        s.quoted = x[s.i + 1] === '\"'\n        s.last = s.i + 2\n      } else {\n        s.str += s.char\n      }\n    } else if (s.char === '\"') {\n      s.quoted = true\n    } else if (s.char === '{') {\n      s.last = ++s.i\n      xs.push(arrayParserLoop(s, x, parser, typarray))\n    } else if (s.char === '}') {\n      s.quoted = false\n      s.last < s.i &&\n        xs.push(parser ? parser(x.slice(s.last, s.i)) : x.slice(s.last, s.i))\n      s.last = s.i + 1\n      break\n    } else if (s.char === delimiter && s.p !== '}' && s.p !== '\"') {\n      xs.push(parser ? parser(x.slice(s.last, s.i)) : x.slice(s.last, s.i))\n      s.last = s.i + 1\n    }\n    s.p = s.char\n  }\n  s.last < s.i &&\n    xs.push(\n      parser ? parser(x.slice(s.last, s.i + 1)) : x.slice(s.last, s.i + 1),\n    )\n  return xs\n}\n","import { query as queryTemplate } from './templating.js'\nimport { parseDescribeStatementResults, parseResults } from './parse.js'\nimport {\n  type Serializer,\n  type Parser,\n  serializers,\n  parsers,\n  arraySerializer,\n  arrayParser,\n} from './types.js'\nimport type {\n  DebugLevel,\n  PGliteInterface,\n  Results,\n  Transaction,\n  QueryOptions,\n  ExecProtocolOptions,\n} from './interface.js'\n\nimport { serialize as serializeProtocol } from '@electric-sql/pg-protocol'\nimport { BackendMessage } from '@electric-sql/pg-protocol/messages'\n\nexport abstract class BasePGlite\n  implements Pick<PGliteInterface, 'query' | 'sql' | 'exec' | 'transaction'>\n{\n  serializers: Record<number | string, Serializer> = { ...serializers }\n  parsers: Record<number | string, Parser> = { ...parsers }\n  #arrayTypesInitialized = false\n\n  // # Abstract properties:\n  abstract debug: DebugLevel\n\n  // # Private properties:\n  #inTransaction = false\n\n  // # Abstract methods:\n\n  /**\n   * Execute a postgres wire protocol message\n   * @param message The postgres wire protocol message to execute\n   * @returns The result of the query\n   */\n  abstract execProtocol(\n    message: Uint8Array,\n    { syncToFs, onNotice }: ExecProtocolOptions,\n  ): Promise<Array<[BackendMessage, Uint8Array]>>\n\n  /**\n   * Execute a postgres wire protocol message directly without wrapping the response.\n   * Only use if `execProtocol()` doesn't suite your needs.\n   *\n   * **Warning:** This bypasses PGlite's protocol wrappers that manage error/notice messages,\n   * transactions, and notification listeners. Only use if you need to bypass these wrappers and\n   * don't intend to use the above features.\n   *\n   * @param message The postgres wire protocol message to execute\n   * @returns The direct message data response produced by Postgres\n   */\n  abstract execProtocolRaw(\n    message: Uint8Array,\n    { syncToFs }: ExecProtocolOptions,\n  ): Promise<Uint8Array>\n\n  /**\n   * Sync the database to the filesystem\n   * @returns Promise that resolves when the database is synced to the filesystem\n   */\n  abstract syncToFs(): Promise<void>\n\n  /**\n   * Handle a file attached to the current query\n   * @param file The file to handle\n   */\n  abstract _handleBlob(blob?: File | Blob): Promise<void>\n\n  /**\n   * Get the written file\n   */\n  abstract _getWrittenBlob(): Promise<File | Blob | undefined>\n\n  /**\n   * Cleanup the current file\n   */\n  abstract _cleanupBlob(): Promise<void>\n\n  abstract _checkReady(): Promise<void>\n  abstract _runExclusiveQuery<T>(fn: () => Promise<T>): Promise<T>\n  abstract _runExclusiveTransaction<T>(fn: () => Promise<T>): Promise<T>\n\n  // # Concrete implementations:\n\n  /**\n   * Initialize the array types\n   * The oid if the type of an element and the typarray is the oid of the type of the\n   * array.\n   * We extract these from the databaes then create the serializers/parsers for\n   * each type.\n   * This should be called at the end of #init() in the implementing class.\n   */\n  async _initArrayTypes() {\n    if (this.#arrayTypesInitialized) return\n    this.#arrayTypesInitialized = true\n\n    const types = await this.query<{ oid: number; typarray: number }>(`\n      SELECT b.oid, b.typarray\n      FROM pg_catalog.pg_type a\n      LEFT JOIN pg_catalog.pg_type b ON b.oid = a.typelem\n      WHERE a.typcategory = 'A'\n      GROUP BY b.oid, b.typarray\n      ORDER BY b.oid\n    `)\n\n    for (const type of types.rows) {\n      this.serializers[type.typarray] = (x) =>\n        arraySerializer(x, this.serializers[type.oid], type.typarray)\n      this.parsers[type.typarray] = (x) =>\n        arrayParser(x, this.parsers[type.oid], type.typarray)\n    }\n  }\n\n  async #execProtocolNoSync(\n    message: Uint8Array,\n    options: ExecProtocolOptions = {},\n  ): Promise<Array<[BackendMessage, Uint8Array]>> {\n    return await this.execProtocol(message, { ...options, syncToFs: false })\n  }\n\n  /**\n   * Execute a single SQL statement\n   * This uses the \"Extended Query\" postgres wire protocol message.\n   * @param query The query to execute\n   * @param params Optional parameters for the query\n   * @returns The result of the query\n   */\n  async query<T>(\n    query: string,\n    params?: any[],\n    options?: QueryOptions,\n  ): Promise<Results<T>> {\n    await this._checkReady()\n    // We wrap the public query method in the transaction mutex to ensure that\n    // only one query can be executed at a time and not concurrently with a\n    // transaction.\n    return await this._runExclusiveTransaction(async () => {\n      return await this.#runQuery<T>(query, params, options)\n    })\n  }\n\n  /**\n   * Execute a single SQL statement like with {@link PGlite.query}, but with a\n   * templated statement where template values will be treated as parameters.\n   *\n   * You can use helpers from `/template` to further format the query with\n   * identifiers, raw SQL, and nested statements.\n   *\n   * This uses the \"Extended Query\" postgres wire protocol message.\n   *\n   * @param query The query to execute with parameters as template values\n   * @returns The result of the query\n   *\n   * @example\n   * ```ts\n   * const results = await db.sql`SELECT * FROM ${identifier`foo`} WHERE id = ${id}`\n   * ```\n   */\n  async sql<T>(\n    sqlStrings: TemplateStringsArray,\n    ...params: any[]\n  ): Promise<Results<T>> {\n    const { query, params: actualParams } = queryTemplate(sqlStrings, ...params)\n    return await this.query(query, actualParams)\n  }\n\n  /**\n   * Execute a SQL query, this can have multiple statements.\n   * This uses the \"Simple Query\" postgres wire protocol message.\n   * @param query The query to execute\n   * @returns The result of the query\n   */\n  async exec(query: string, options?: QueryOptions): Promise<Array<Results>> {\n    await this._checkReady()\n    // We wrap the public exec method in the transaction mutex to ensure that\n    // only one query can be executed at a time and not concurrently with a\n    // transaction.\n    return await this._runExclusiveTransaction(async () => {\n      return await this.#runExec(query, options)\n    })\n  }\n\n  /**\n   * Internal method to execute a query\n   * Not protected by the transaction mutex, so it can be used inside a transaction\n   * @param query The query to execute\n   * @param params Optional parameters for the query\n   * @returns The result of the query\n   */\n  async #runQuery<T>(\n    query: string,\n    params: any[] = [],\n    options?: QueryOptions,\n  ): Promise<Results<T>> {\n    return await this._runExclusiveQuery(async () => {\n      // We need to parse, bind and execute a query with parameters\n      this.#log('runQuery', query, params, options)\n      await this._handleBlob(options?.blob)\n\n      let results\n\n      try {\n        const parseResults = await this.#execProtocolNoSync(\n          serializeProtocol.parse({ text: query, types: options?.paramTypes }),\n          options,\n        )\n\n        const dataTypeIDs = parseDescribeStatementResults(\n          (\n            await this.#execProtocolNoSync(\n              serializeProtocol.describe({ type: 'S' }),\n              options,\n            )\n          ).map(([msg]) => msg),\n        )\n\n        const values = params.map((param, i) => {\n          const oid = dataTypeIDs[i]\n          if (param === null || param === undefined) {\n            return null\n          }\n          const serialize = this.serializers[oid]\n          if (serialize) {\n            return serialize(param)\n          } else {\n            return param.toString()\n          }\n        })\n\n        results = [\n          ...parseResults,\n          ...(await this.#execProtocolNoSync(\n            serializeProtocol.bind({\n              values,\n            }),\n            options,\n          )),\n          ...(await this.#execProtocolNoSync(\n            serializeProtocol.describe({ type: 'P' }),\n            options,\n          )),\n          ...(await this.#execProtocolNoSync(\n            serializeProtocol.execute({}),\n            options,\n          )),\n        ]\n      } finally {\n        await this.#execProtocolNoSync(serializeProtocol.sync(), options)\n      }\n\n      await this._cleanupBlob()\n      if (!this.#inTransaction) {\n        await this.syncToFs()\n      }\n      const blob = await this._getWrittenBlob()\n      return parseResults(\n        results.map(([msg]) => msg),\n        this.parsers,\n        options,\n        blob,\n      )[0] as Results<T>\n    })\n  }\n\n  /**\n   * Internal method to execute a query\n   * Not protected by the transaction mutex, so it can be used inside a transaction\n   * @param query The query to execute\n   * @param params Optional parameters for the query\n   * @returns The result of the query\n   */\n  async #runExec(\n    query: string,\n    options?: QueryOptions,\n  ): Promise<Array<Results>> {\n    return await this._runExclusiveQuery(async () => {\n      // No params so we can just send the query\n      this.#log('runExec', query, options)\n      await this._handleBlob(options?.blob)\n      let results\n      try {\n        results = await this.#execProtocolNoSync(\n          serializeProtocol.query(query),\n          options,\n        )\n      } finally {\n        await this.#execProtocolNoSync(serializeProtocol.sync(), options)\n      }\n      this._cleanupBlob()\n      if (!this.#inTransaction) {\n        await this.syncToFs()\n      }\n      const blob = await this._getWrittenBlob()\n      return parseResults(\n        results.map(([msg]) => msg),\n        this.parsers,\n        options,\n        blob,\n      ) as Array<Results>\n    })\n  }\n\n  /**\n   * Execute a transaction\n   * @param callback A callback function that takes a transaction object\n   * @returns The result of the transaction\n   */\n  async transaction<T>(\n    callback: (tx: Transaction) => Promise<T>,\n  ): Promise<T | undefined> {\n    await this._checkReady()\n    return await this._runExclusiveTransaction(async () => {\n      await this.#runExec('BEGIN')\n      this.#inTransaction = true\n\n      // Once a transaction is closed, we throw an error if it's used again\n      let closed = false\n      const checkClosed = () => {\n        if (closed) {\n          throw new Error('Transaction is closed')\n        }\n      }\n\n      const tx: Transaction = {\n        query: async <T>(\n          query: string,\n          params?: any[],\n          options?: QueryOptions,\n        ): Promise<Results<T>> => {\n          checkClosed()\n          return await this.#runQuery(query, params, options)\n        },\n        sql: async <T>(\n          sqlStrings: TemplateStringsArray,\n          ...params: any[]\n        ): Promise<Results<T>> => {\n          const { query, params: actualParams } = queryTemplate(\n            sqlStrings,\n            ...params,\n          )\n          return await this.#runQuery(query, actualParams)\n        },\n        exec: async (\n          query: string,\n          options?: QueryOptions,\n        ): Promise<Array<Results>> => {\n          checkClosed()\n          return await this.#runExec(query, options)\n        },\n        rollback: async () => {\n          checkClosed()\n          // Rollback and set the closed flag to prevent further use of this\n          // transaction\n          await this.#runExec('ROLLBACK')\n          closed = true\n        },\n        get closed() {\n          return closed\n        },\n      }\n\n      try {\n        const result = await callback(tx)\n        if (!closed) {\n          closed = true\n          await this.#runExec('COMMIT')\n        }\n        this.#inTransaction = false\n        return result\n      } catch (e) {\n        if (!closed) {\n          await this.#runExec('ROLLBACK')\n        }\n        this.#inTransaction = false\n        throw e\n      }\n    })\n  }\n\n  /**\n   * Internal log function\n   */\n  #log(...args: any[]) {\n    if (this.debug > 0) {\n      console.log(...args)\n    }\n  }\n}\n","const TemplateType = {\n  part: 'part',\n  container: 'container',\n} as const\n\ninterface TemplatePart {\n  _templateType: typeof TemplateType.part\n  str: string\n}\n\ninterface TemplateContainer {\n  _templateType: typeof TemplateType.container\n  strings: TemplateStringsArray\n  values: any[]\n}\n\ninterface TemplatedQuery {\n  query: string\n  params: any[]\n}\n\nfunction addToLastAndPushWithSuffix(\n  arr: string[],\n  suffix: string,\n  ...values: string[]\n) {\n  const lastArrIdx = arr.length - 1\n  const lastValIdx = values.length - 1\n\n  // no-op\n  if (lastValIdx === -1) return\n\n  // overwrite last element\n  if (lastValIdx === 0) {\n    arr[lastArrIdx] = arr[lastArrIdx] + values[0] + suffix\n    return\n  }\n\n  // sandwich values between array and suffix\n  arr[lastArrIdx] = arr[lastArrIdx] + values[0]\n  arr.push(...values.slice(1, lastValIdx))\n  arr.push(values[lastValIdx] + suffix)\n}\n\n/**\n * Templating utility that allows nesting multiple SQL strings without\n * losing the automatic parametrization capabilities of {@link query}.\n *\n * @example\n * ```ts\n * query`SELECT * FROM tale ${withFilter ? sql`WHERE foo = ${fooVar}` : sql``}`\n * // > { query: 'SELECT * FROM tale WHERE foo = $1', params: [fooVar] }\n * // or\n * // > { query: 'SELECT * FROM tale', params: [] }\n * ```\n */\nexport function sql(\n  strings: TemplateStringsArray,\n  ...values: any[]\n): TemplateContainer {\n  const parsedStrings = [strings[0]] as string[] & {\n    raw: string[]\n  }\n  parsedStrings.raw = [strings.raw[0]]\n\n  const parsedValues: any[] = []\n  for (let i = 0; i < values.length; i++) {\n    const value = values[i]\n    const nextStringIdx = i + 1\n\n    // if value is a template tag, collapse into last string\n    if (value?._templateType === TemplateType.part) {\n      addToLastAndPushWithSuffix(\n        parsedStrings,\n        strings[nextStringIdx],\n        value.str,\n      )\n      addToLastAndPushWithSuffix(\n        parsedStrings.raw,\n        strings.raw[nextStringIdx],\n        value.str,\n      )\n      continue\n    }\n\n    // if value is an output of this method, append in place\n    if (value?._templateType === TemplateType.container) {\n      addToLastAndPushWithSuffix(\n        parsedStrings,\n        strings[nextStringIdx],\n        ...value.strings,\n      )\n      addToLastAndPushWithSuffix(\n        parsedStrings.raw,\n        strings.raw[nextStringIdx],\n        ...value.strings.raw,\n      )\n      parsedValues.push(...value.values)\n      continue\n    }\n\n    // otherwise keep reconstructing\n    parsedStrings.push(strings[nextStringIdx])\n    parsedStrings.raw.push(strings.raw[nextStringIdx])\n    parsedValues.push(value)\n  }\n\n  return {\n    _templateType: 'container',\n    strings: parsedStrings,\n    values: parsedValues,\n  }\n}\n\n/**\n * Allows adding identifiers into a query template string without\n * parametrizing them. This method will automatically escape identifiers.\n *\n * @example\n * ```ts\n * query`SELECT * FROM ${identifier`foo`} WHERE ${identifier`id`} = ${id}`\n * // > { query: 'SELECT * FROM \"foo\" WHERE \"id\" = $1', params: [id] }\n * ```\n */\nexport function identifier(\n  strings: TemplateStringsArray,\n  ...values: any[]\n): TemplatePart {\n  return {\n    _templateType: 'part',\n    str: `\"${String.raw(strings, ...values)}\"`,\n  }\n}\n\n/**\n * Allows adding raw strings into a query template string without\n * parametrizing or modifying them in any way.\n *\n * @example\n * ```ts\n * query`SELECT * FROM foo ${raw`WHERE id = ${2+3}`}`\n * // > { query: 'SELECT * FROM foo WHERE id = 5', params: [] }\n * ```\n */\n\nexport function raw(\n  strings: TemplateStringsArray,\n  ...values: any[]\n): TemplatePart {\n  return {\n    _templateType: 'part',\n    str: String.raw(strings, ...values),\n  }\n}\n\n/**\n * Generates a parametrized query from a templated query string, assigning\n * the provided values to the appropriate named parameters.\n *\n * You can use templating helpers like {@link identifier} and {@link raw} to\n * add identifiers and raw strings to the query without making them parameters,\n * and you can use {@link sql} to nest multiple queries and create utilities.\n *\n * @example\n * ```ts\n * query`SELECT * FROM ${identifier`foo`} WHERE id = ${id} and name = ${name}`\n * // > { query: 'SELECT * FROM \"foo\" WHERE id = $1 and name = $2', params: [id, name] }\n * ```\n */\nexport function query(\n  strings: TemplateStringsArray,\n  ...values: any[]\n): TemplatedQuery {\n  const { strings: queryStringParts, values: params } = sql(strings, ...values)\n  return {\n    query: [\n      queryStringParts[0],\n      ...params.flatMap((_, idx) => [`$${idx + 1}`, queryStringParts[idx + 1]]),\n    ].join(''),\n    params: params,\n  }\n}\n","import tinyTar from 'tinytar'\nimport { IN_NODE } from './utils.js'\nimport type { PostgresMod } from './postgresMod.js'\n\nexport async function loadExtensionBundle(\n  bundlePath: URL,\n): Promise<Blob | null> {\n  // Async load the extension bundle tar file\n  // could be from a URL or a file\n  if (IN_NODE) {\n    const fs = await import('fs')\n    const zlib = await import('zlib')\n    const { Writable } = await import('stream')\n    const { pipeline } = await import('stream/promises')\n\n    if (!fs.existsSync(bundlePath)) {\n      throw new Error(`Extension bundle not found: ${bundlePath}`)\n    }\n\n    const gunzip = zlib.createGunzip()\n    const chunks: Uint8Array[] = []\n\n    await pipeline(\n      fs.createReadStream(bundlePath),\n      gunzip,\n      new Writable({\n        write(chunk, _encoding, callback) {\n          chunks.push(chunk)\n          callback()\n        },\n      }),\n    )\n    return new Blob(chunks)\n  } else {\n    const response = await fetch(bundlePath.toString())\n    if (!response.ok || !response.body) {\n      return null\n    } else if (response.headers.get('Content-Encoding') === 'gzip') {\n      // Although the bundle is manually compressed, some servers will recognize\n      // that and add a content-encoding header. Fetch will then automatically\n      // decompress the response.\n      return response.blob()\n    } else {\n      const decompressionStream = new DecompressionStream('gzip')\n      const decompressedStream = new Response(\n        response.body.pipeThrough(decompressionStream),\n      )\n      return decompressedStream.blob()\n    }\n  }\n}\n\nexport async function loadExtensions(\n  mod: PostgresMod,\n  log: (...args: any[]) => void,\n) {\n  for (const ext in mod.pg_extensions) {\n    let blob\n    try {\n      blob = await mod.pg_extensions[ext]\n    } catch (err) {\n      console.error('Failed to fetch extension:', ext, err)\n      continue\n    }\n    if (blob) {\n      const bytes = new Uint8Array(await blob.arrayBuffer())\n      loadExtension(mod, ext, bytes, log)\n    } else {\n      console.error('Could not get binary data for extension:', ext)\n    }\n  }\n}\n\nfunction loadExtension(\n  mod: PostgresMod,\n  _ext: string,\n  bytes: Uint8Array,\n  log: (...args: any[]) => void,\n) {\n  const data = tinyTar.untar(bytes)\n  data.forEach((file: any) => {\n    if (!file.name.startsWith('.')) {\n      const filePath = mod.WASM_PREFIX + '/' + file.name\n      if (file.name.endsWith('.so')) {\n        const extOk = (...args: any[]) => {\n          log('pgfs:ext OK', filePath, args)\n        }\n        const extFail = (...args: any[]) => {\n          log('pgfs:ext FAIL', filePath, args)\n        }\n        mod.FS.createPreloadedFile(\n          dirname(filePath),\n          file.name.split('/').pop()!.slice(0, -3),\n          file.data as any, // There is a type error in Emscripten's FS.createPreloadedFile, this excepts a Uint8Array, but the type is defined as any\n          true,\n          true,\n          extOk,\n          extFail,\n          false,\n        )\n      } else {\n        mod.FS.writeFile(filePath, file.data)\n      }\n    }\n  })\n}\n\nfunction dirname(path: string) {\n  const last = path.lastIndexOf('/')\n  if (last > 0) {\n    return path.slice(0, last)\n  } else {\n    return path\n  }\n}\n","import type {\n  BackendMessage,\n  NoticeMessage,\n} from '@electric-sql/pg-protocol/messages'\nimport type { Filesystem } from './fs/types.js'\nimport type { DumpTarCompressionOptions } from './fs/tarUtils.js'\n\nexport type FilesystemType = 'nodefs' | 'idbfs' | 'memoryfs'\n\nexport type DebugLevel = 0 | 1 | 2 | 3 | 4 | 5\n\nexport type RowMode = 'array' | 'object'\n\nexport interface ParserOptions {\n  [pgType: number]: (value: string) => any\n}\n\nexport interface QueryOptions {\n  rowMode?: RowMode\n  parsers?: ParserOptions\n  blob?: Blob | File\n  onNotice?: (notice: NoticeMessage) => void\n  paramTypes?: number[]\n}\n\nexport interface ExecProtocolOptions {\n  syncToFs?: boolean\n  throwOnError?: boolean\n  onNotice?: (notice: NoticeMessage) => void\n}\n\nexport interface ExtensionSetupResult {\n  emscriptenOpts?: any\n  namespaceObj?: any\n  bundlePath?: URL\n  init?: () => Promise<void>\n  close?: () => Promise<void>\n}\n\nexport type ExtensionSetup = (\n  pg: PGliteInterface,\n  emscriptenOpts: any,\n  clientOnly?: boolean,\n) => Promise<ExtensionSetupResult>\n\nexport interface Extension {\n  name: string\n  setup: ExtensionSetup\n}\n\nexport type Extensions = {\n  [namespace: string]: Extension | URL\n}\n\nexport interface DumpDataDirResult {\n  tarball: Uint8Array\n  extension: '.tar' | '.tgz'\n  filename: string\n}\n\nexport interface PGliteOptions {\n  dataDir?: string\n  username?: string\n  database?: string\n  fs?: Filesystem\n  debug?: DebugLevel\n  relaxedDurability?: boolean\n  extensions?: Extensions\n  loadDataDir?: Blob | File\n  initialMemory?: number\n  wasmModule?: WebAssembly.Module\n  fsBundle?: Blob | File\n}\n\nexport type PGliteInterface = {\n  readonly waitReady: Promise<void>\n  readonly debug: DebugLevel\n  readonly ready: boolean\n  readonly closed: boolean\n\n  close(): Promise<void>\n  query<T>(\n    query: string,\n    params?: any[],\n    options?: QueryOptions,\n  ): Promise<Results<T>>\n  sql<T>(\n    sqlStrings: TemplateStringsArray,\n    ...params: any[]\n  ): Promise<Results<T>>\n  exec(query: string, options?: QueryOptions): Promise<Array<Results>>\n  transaction<T>(\n    callback: (tx: Transaction) => Promise<T>,\n  ): Promise<T | undefined>\n  execProtocolRaw(\n    message: Uint8Array,\n    options?: ExecProtocolOptions,\n  ): Promise<Uint8Array>\n  execProtocol(\n    message: Uint8Array,\n    options?: ExecProtocolOptions,\n  ): Promise<Array<[BackendMessage, Uint8Array]>>\n  listen(\n    channel: string,\n    callback: (payload: string) => void,\n  ): Promise<() => Promise<void>>\n  unlisten(channel: string, callback?: (payload: string) => void): Promise<void>\n  onNotification(\n    callback: (channel: string, payload: string) => void,\n  ): () => void\n  offNotification(callback: (channel: string, payload: string) => void): void\n  dumpDataDir(compression?: DumpTarCompressionOptions): Promise<File | Blob>\n}\n\nexport type PGliteInterfaceExtensions<E> = E extends Extensions\n  ? {\n      [K in keyof E]: E[K] extends Extension\n        ? Awaited<ReturnType<E[K]['setup']>>['namespaceObj'] extends infer N\n          ? N extends undefined | null | void\n            ? never\n            : N\n          : never\n        : never\n    }\n  : Record<string, never>\n\nexport type Row<T = { [key: string]: any }> = T\n\nexport type Results<T = { [key: string]: any }> = {\n  rows: Row<T>[]\n  affectedRows?: number\n  fields: { name: string; dataTypeID: number }[]\n  blob?: Blob // Only set when a file is returned, such as from a COPY command\n}\n\nexport interface Transaction {\n  query<T>(\n    query: string,\n    params?: any[],\n    options?: QueryOptions,\n  ): Promise<Results<T>>\n  sql<T>(\n    sqlStrings: TemplateStringsArray,\n    ...params: any[]\n  ): Promise<Results<T>>\n  exec(query: string, options?: QueryOptions): Promise<Array<Results>>\n  rollback(): Promise<void>\n  get closed(): boolean\n}\n"],"mappings":"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","names":["getImportMetaUrl","importMetaUrl","init_cjs_shims","__esmMin","FilesystemBase","init_types","__esmMin","init_cjs_shims","dataDir","_mod","_relaxedDurability","_FS","require_utils","__commonJSMin","exports","module","init_cjs_shims","MAX_SAFE_INTEGER","undefined","isUndefined","value","isString","isDateTime","isObject","isFunction","isLength","isArray","isArrayLike","isArrayBuffer","map","array","iteratee","find","result","item","index","found","extend","target","toUint8Array","i","length","require_constants","__commonJSMin","exports","module","init_cjs_shims","NULL_CHAR","require_types","__commonJSMin","exports","module","init_cjs_shims","utils","constants","recordSize","defaultFileMode","defaultUid","defaultGid","posixHeader","file","field","formatTarString","buffer","offset","parseTarString","mode","formatTarNumber","result","parseTarNumber","formatTarDateTime","parseTarDateTime","fixUstarMagic","effectiveHeaderSize","header","last","value","chars","length","defaultValue","bytes","returnUnprocessed","index","calculateChecksum","skipChecksum","from","to","skipFrom","skipTo","whitespace","i","byte","require_tar","__commonJSMin","exports","module","init_cjs_shims","constants","utils","types","headerSize","file","dataSize","allocateBuffer","files","totalSize","writeHeader","buffer","offset","currentOffset","field","value","length","i","checksum","writeData","tar","require_untar","__commonJSMin","exports","module","init_cjs_shims","constants","utils","types","defaultOptions","excludeFields","messages","headerSize","header","dataSize","size","isEndOfFile","buffer","offset","from","to","readHeader","options","result","currentOffset","field","error","checksum","readData","createFile","data","name","untar","require_tinytar","__commonJSMin","exports","module","init_cjs_shims","utils","constants","tar","untar","dumpTar","FS","dbname","compression","tarball","createTarball","PGDATA","compressed","zipped","maybeZip","filename","type","loadTar","file","compressedMimeTypes","unzip","files","filePath","dirPath","i","dir","dateToUnixTimestamp","readDirectory","path","traverseDirectory","currentPath","entry","fullPath","stats","data","directoryPath","zipBrowser","zipNode","cs","writer","reader","chunks","value","done","acc","chunk","offset","promisify","gzip","unzipBrowser","unzipNode","ds","decompressed","gunzip","date","import_tinytar","init_tarUtils","__esmMin","init_cjs_shims","init_fs","IdbFs","init_idbfs","__esmMin","init_cjs_shims","init_types","init_fs","init_tarUtils","FilesystemBase","opts","mod","idbfs","PGDATA","fs","resolve","reject","err","_relaxedDurability","dbname","compression","dumpTar","FS","indexedDb","MemoryFS","init_memoryfs","__esmMin","init_cjs_shims","init_types","init_tarUtils","FilesystemBase","opts","mod","dbname","compression","dumpTar","FS","nodefs_exports","__export","NodeFS","fs","path","init_nodefs","__esmMin","init_cjs_shims","init_types","init_fs","init_tarUtils","FilesystemBase","dataDir","opts","mod","nodefs","PGDATA","dbname","compression","dumpTar","FS","ERRNO_CODES","FsError","init_types","__esmMin","init_cjs_shims","code","message","log","_args","createOPFSAHP","init_emscriptenFs","__esmMin","init_cjs_shims","init_types","Module","opfsAhp","FS","OPFS","f","e","ERRNO_CODES","_mount","_populate","_done","parent","name","mode","_dev","node","path","parts","stats","attr","dev","oldNode","newDir","newName","oldPath","newPath","stream","buffer","offset","length","position","whence","stat","prot","flags","ptr","mmapFlags","STATE_FILE","DATA_DIR","INITIAL_MODE","_ready","_opfsRootAh","_rootAh","_dataDirAh","_stateFH","_stateSH","_fh","_sh","_handleIdCounter","_openHandlePaths","_openHandleIds","_unsyncedSH","_OpfsAhp_instances","init_fn","tryWithWAL_fn","logWAL_fn","pathParts_fn","resolvePath_fn","getPathFromFd_fn","nextHandleId_fn","resolveOpfsDirectory_fn","_OpfsAhp","OpfsAhp","init_opfsAhp","__esmMin","init_cjs_shims","init_types","root","initialPoolSize","maintainedPoolSize","__privateAdd","__privateMethod","options","instance","__privateGet","size","change","promises","resolve","filename","fh","sh","index","stateAB","path","mode","node","fd","blksize","parts","newDirName","currentPath","part","FsError","newDir","_flags","_mode","handleId","buffer","offset","length","position","oldPath","newPath","doFileOps","oldPathParts","oldFilename","oldParent","newPathParts","newFilename","newParent","pathParts","dirName","parent","len","dir","atime","mtime","_atime","data","lastModified","ret","__privateSet","state","stateLines","isNewState","wal","line","entry","methodName","e","walkPromises","walk","child","poolPromises","fn","entryJSON","from","id","__privateWrapper","ah","opfs_ahp_exports","__export","OpfsAhpFS","_initialPoolSize","_maintainedPoolSize","init_opfs_ahp","__esmMin","init_cjs_shims","init_types","init_fs","init_emscriptenFs","init_opfsAhp","init_tarUtils","FilesystemBase","dataDir","initialPoolSize","maintainedPoolSize","__privateAdd","__privateSet","opts","OpfsAhp","__privateGet","mod","OPFS","createOPFSAHP","PGDATA","_fs","relaxedDurability","dbname","compression","dumpTar","FS","parseDataDir","dataDir","fsType","loadFs","fs","NodeFS","IdbFs","OpfsAhpFS","MemoryFS","WASM_PREFIX","PGDATA","init_fs","__esmMin","init_cjs_shims","init_idbfs","init_memoryfs","src_exports","__export","IdbFs","MemoryFS","Mutex","PGlite","formatQuery","messages_exports","parse_exports","types_exports","uuid","__toCommonJS","init_cjs_shims","init_cjs_shims","init_cjs_shims","E_TIMEOUT","E_ALREADY_LOCKED","E_CANCELED","__awaiter$2","thisArg","_arguments","P","generator","adopt","value","resolve","reject","fulfilled","step","e","rejected","result","Semaphore","_value","_cancelError","weight","callback","release","queue","entry","_a","queueEntry","previousValue","previousWeight","called","waiter","__awaiter$1","Mutex","cancelError","releaser","init_cjs_shims","import_postgres","postgresMod_default","PostgresModFactory","init_fs","init_cjs_shims","src_exports","__export","Parser","messages_exports","serialize","init_cjs_shims","init_cjs_shims","init_cjs_shims","init_cjs_shims","byteLengthUtf8","str","byteLength","i","code","_bufferView","_offset","_littleEndian","_encoder","_headerPosition","_Writer_instances","allocateBuffer_fn","ensure_fn","join_fn","Writer","size","__privateAdd","__privateSet","__privateMethod","num","__privateGet","string","__privateWrapper","length","byteLengthUtf8","otherBuffer","code","result","oldBuffer","newSize","writer","Writer","startup","opts","key","bodyBuffer","length","requestSsl","bufferView","password","sendSASLInitialResponseMessage","mechanism","initialResponse","byteLengthUtf8","sendSCRAMClientFinalMessage","additionalData","query","text","emptyValueArray","parse","name","buffer","type","paramWriter","writeValues","values","valueMapper","i","mappedVal","writer","paramWriter","buffer","byteLengthUtf8","bind","config","portal","statement","binary","emptyValueArray","len","emptyExecute","execute","rows","portalLength","bufferView","cancel","processID","secretKey","cstringMessage","code","string","Writer","emptyDescribePortal","emptyDescribeStatement","describe","msg","close","text","copyData","chunk","copyFail","message","codeOnlyBuffer","flushBuffer","syncBuffer","endBuffer","copyDoneBuffer","serialize","startup","password","requestSsl","sendSASLInitialResponseMessage","sendSCRAMClientFinalMessage","query","parse","init_cjs_shims","messages_exports","__export","AuthenticationCleartextPassword","AuthenticationMD5Password","AuthenticationOk","AuthenticationSASL","AuthenticationSASLContinue","AuthenticationSASLFinal","BackendKeyDataMessage","CommandCompleteMessage","CopyDataMessage","CopyResponse","DataRowMessage","DatabaseError","Field","NoticeMessage","NotificationResponseMessage","ParameterDescriptionMessage","ParameterStatusMessage","ReadyForQueryMessage","RowDescriptionMessage","bindComplete","closeComplete","copyDone","emptyQuery","noData","parseComplete","portalSuspended","replicationStart","init_cjs_shims","length","salt","mechanisms","data","message","name","chunk","binary","columnCount","tableID","columnID","dataTypeID","dataTypeSize","dataTypeModifier","format","fieldCount","parameterCount","parameterName","parameterValue","processID","secretKey","processId","channel","payload","status","text","fields","init_cjs_shims","Modes","init_cjs_shims","emptyBuffer","_bufferView","_offset","_encoding","_decoder","_littleEndian","BufferReader","offset","__privateAdd","__privateGet","__privateSet","buffer","result","__privateWrapper","length","start","end","CODE_LENGTH","LEN_LENGTH","HEADER_LENGTH","emptyBuffer","_bufferView","_bufferRemainingLength","_bufferOffset","_reader","_Parser_instances","mergeBuffer_fn","handlePacket_fn","parseReadyForQueryMessage_fn","parseCommandCompleteMessage_fn","parseCopyData_fn","parseCopyInMessage_fn","parseCopyOutMessage_fn","parseCopyMessage_fn","parseNotificationMessage_fn","parseRowDescriptionMessage_fn","parseField_fn","parseParameterDescriptionMessage_fn","parseDataRowMessage_fn","parseParameterStatusMessage_fn","parseBackendKeyData_fn","parseAuthenticationResponse_fn","parseErrorMessage_fn","Parser","__privateAdd","emptyBuffer","BufferReader","buffer","callback","__privateMethod","bufferFullLength","__privateGet","offset","HEADER_LENGTH","code","length","CODE_LENGTH","fullMessageLength","message","__privateSet","newLength","newBuffer","newBufferLength","bytes","bindComplete","parseComplete","closeComplete","noData","portalSuspended","copyDone","replicationStart","emptyQuery","DatabaseError","status","ReadyForQueryMessage","text","CommandCompleteMessage","chunk","CopyDataMessage","messageName","isBinary","columnCount","CopyResponse","i","processId","channel","payload","NotificationResponseMessage","fieldCount","RowDescriptionMessage","name","tableID","columnID","dataTypeID","dataTypeSize","dataTypeModifier","mode","Modes","Field","parameterCount","ParameterDescriptionMessage","fields","len","DataRowMessage","value","ParameterStatusMessage","processID","secretKey","BackendKeyDataMessage","AuthenticationOk","AuthenticationCleartextPassword","AuthenticationMD5Password","mechanisms","mechanism","AuthenticationSASL","AuthenticationSASLContinue","AuthenticationSASLFinal","fieldType","messageValue","NoticeMessage","parse_exports","__export","parseDescribeStatementResults","parseResults","init_cjs_shims","types_exports","__export","ABSTIME","ACLITEM","BIT","BOOL","BPCHAR","BYTEA","CHAR","CID","CIDR","CIRCLE","DATE","FLOAT4","FLOAT8","GTSVECTOR","INET","INT2","INT4","INT8","INTERVAL","JSON","JSONB","MACADDR","MACADDR8","MONEY","NUMERIC","OID","PATH","PG_DEPENDENCIES","PG_LSN","PG_NDISTINCT","PG_NODE_TREE","POLYGON","REFCURSOR","REGCLASS","REGCONFIG","REGDICTIONARY","REGNAMESPACE","REGOPER","REGOPERATOR","REGPROC","REGPROCEDURE","REGROLE","REGTYPE","RELTIME","SMGR","TEXT","TID","TIME","TIMESTAMP","TIMESTAMPTZ","TIMETZ","TINTERVAL","TSQUERY","TSVECTOR","TXID_SNAPSHOT","UUID","VARBIT","VARCHAR","XID","XML","arrayParser","arraySerializer","parseType","parsers","serializers","types","init_cjs_shims","JSON_parse","JSON_stringify","x","n","byte","hexString","_","idx","defaultHandlers","typeHandlers","type","handler","k","to","from","serialize","parse","f","escapeBackslash","escapeQuote","arrayEscape","xs","serializer","typarray","first","delimiter","arrayParserState","parser","arrayParserLoop","s","parseResults","messages","defaultParsers","options","blob","resultSets","currentResultSet","affectedRows","parsers","filteredMessages","msg","message","index","field","i","parseType","retrieveRowCount","parts","parseDescribeStatementResults","IN_NODE","wasmDownloadPromise","startWasmDownload","moduleUrl","importMetaUrl","cachedWasmModule","instantiateWasm","imports","module","buffer","newModule","instance","response","getFsBundle","fsBundleUrl","uuid","bytes","i","hexValues","byte","formatQuery","pg","query","params","tx","dataTypeIDs","serialize","parseDescribeStatementResults","msg","subbedQuery","_","num","TEXT","init_cjs_shims","init_cjs_shims","TemplateType","addToLastAndPushWithSuffix","arr","suffix","values","lastArrIdx","lastValIdx","sql","strings","parsedStrings","parsedValues","value","nextStringIdx","query","strings","values","queryStringParts","params","sql","_","idx","_arrayTypesInitialized","_inTransaction","_BasePGlite_instances","execProtocolNoSync_fn","runQuery_fn","runExec_fn","log_fn","BasePGlite","__privateAdd","serializers","parsers","__privateGet","__privateSet","types","type","x","arraySerializer","arrayParser","query","params","options","__privateMethod","sqlStrings","actualParams","callback","closed","checkClosed","tx","result","e","message","results","parseResults","serialize","dataTypeIDs","parseDescribeStatementResults","msg","values","param","i","oid","blob","args","init_cjs_shims","import_tinytar","loadExtensionBundle","bundlePath","IN_NODE","fs","zlib","Writable","pipeline","gunzip","chunks","chunk","_encoding","callback","response","decompressionStream","loadExtensions","mod","log","ext","blob","err","bytes","loadExtension","_ext","tinyTar","file","filePath","extOk","args","extFail","dirname","path","last","init_tarUtils","init_fs","_ready","_closing","_closed","_inTransaction","_relaxedDurability","_queryMutex","_transactionMutex","_fsSyncMutex","_fsSyncScheduled","_extensions","_extensionsClose","_protocolParser","_queryReadBuffer","_queryWriteChunks","_notifyListeners","_globalNotifyListeners","_PGlite_instances","init_fn","log_fn","_PGlite","BasePGlite","dataDirOrPGliteOptions","options","__privateAdd","Mutex","Parser","__privateSet","__privateMethod","resolvedOpts","pg","__privateGet","closeFn","serialize","e","err","blob","message","syncToFs","msg_len","mod","msg_start","msg_end","data","throwOnError","onNotice","results","msg","DatabaseError","NoticeMessage","CommandCompleteMessage","NotificationResponseMessage","listeners","cb","doSync","channel","callback","compression","dbname","fn","dataDir","fsType","parseDataDir","loadFs","extensionBundlePromises","extensionInitFns","args","PGDATA","WASM_PREFIX","startWasmDownload","fsBundleBufferPromise","getFsBundle","fsBundleBuffer","buffer","emscriptenOpts","imports","successCallback","instantiateWasm","instance","module","remotePackageName","remotePackageSize","devId","devOpt","_stream","offset","length","position","buf","contents","size","i","_position","stream","whence","extName","ext","loadExtensionBundle","extRet","postgresMod_default","loadTar","loadExtensions","idb","pguser","pgdatabase","initFn","PGlite","init_cjs_shims","init_memoryfs","init_idbfs"]}