{"version":3,"sources":["../../src/fs/nodefs.ts"],"sourcesContent":["import * as fs from 'fs'\nimport * as path from 'path'\nimport { FilesystemBase } from './types.js'\nimport { PGDATA } from './index.js'\nimport type { PostgresMod, FS } from '../postgresMod.js'\nimport { dumpTar, type DumpTarCompressionOptions } from './tarUtils.js'\n\nexport class NodeFS extends FilesystemBase {\n  protected rootDir: string\n\n  constructor(dataDir: string) {\n    super(dataDir)\n    this.rootDir = path.resolve(dataDir)\n    if (!fs.existsSync(path.join(this.rootDir))) {\n      fs.mkdirSync(this.rootDir)\n    }\n  }\n\n  async emscriptenOpts(opts: Partial<PostgresMod>) {\n    const options: Partial<PostgresMod> = {\n      ...opts,\n      preRun: [\n        ...(opts.preRun || []),\n        (mod: any) => {\n          const nodefs = mod.FS.filesystems.NODEFS\n          mod.FS.mkdir(PGDATA)\n          mod.FS.mount(nodefs, { root: this.rootDir }, PGDATA)\n        },\n      ],\n    }\n    return options\n  }\n\n  async dumpTar(\n    mod: FS,\n    dbname: string,\n    compression?: DumpTarCompressionOptions,\n  ) {\n    return dumpTar(mod, dbname, compression)\n  }\n\n  async close(FS: FS): Promise<void> {\n    FS.quit()\n  }\n}\n"],"mappings":"gGAAAA,IAAA,UAAYC,MAAQ,KACpB,UAAYC,MAAU,OAMf,IAAMC,EAAN,cAAqBC,CAAe,CAGzC,YAAYC,EAAiB,CAC3B,MAAMA,CAAO,EACb,KAAK,QAAe,UAAQA,CAAO,EAC3B,aAAgB,OAAK,KAAK,OAAO,CAAC,GACrC,YAAU,KAAK,OAAO,CAE7B,CAEA,MAAM,eAAeC,EAA4B,CAY/C,MAXsC,CACpC,GAAGA,EACH,OAAQ,CACN,GAAIA,EAAK,QAAU,CAAC,EACnBC,GAAa,CACZ,IAAMC,EAASD,EAAI,GAAG,YAAY,OAClCA,EAAI,GAAG,MAAME,CAAM,EACnBF,EAAI,GAAG,MAAMC,EAAQ,CAAE,KAAM,KAAK,OAAQ,EAAGC,CAAM,CACrD,CACF,CACF,CAEF,CAEA,MAAM,QACJF,EACAG,EACAC,EACA,CACA,OAAOC,EAAQL,EAAKG,EAAQC,CAAW,CACzC,CAEA,MAAM,MAAME,EAAuB,CACjCA,EAAG,KAAK,CACV,CACF","names":["init_esm_shims","fs","path","NodeFS","FilesystemBase","dataDir","opts","mod","nodefs","PGDATA","dbname","compression","dumpTar","FS"]}